# Code for /obj
hou_node = hou.node("/obj")
# Update the parent node.
hou_parent = hou_node

# Initialize parent node variable.
if locals().get("hou_parent") is None:
    hou_parent = hou.node("/obj")

# Code for /obj/__netbox4
hou_netbox = hou_parent.createNetworkBox("__netbox4")
hou_netbox.setPosition(hou.Vector2(25.1714, -7.30809))
hou_netbox.setSize(hou.Vector2(9.28966, 10.407))
hou_netbox.setMinimized(False)
hou_netbox.setSelected(False)
hou_netbox.setAutoFit(False)
hou_netbox.setComment("PUBLISH")
hou_netbox.setColor(hou.Color([0.573, 0.353, 0]))

# Initialize parent node variable.
if locals().get("hou_parent") is None:
    hou_parent = hou.node("/obj")

# Code for /obj/__netbox3
hou_netbox = hou_parent.createNetworkBox("__netbox3")
hou_netbox.setPosition(hou.Vector2(15.0243, -7.30809))
hou_netbox.setSize(hou.Vector2(9.28966, 10.407))
hou_netbox.setMinimized(False)
hou_netbox.setSelected(False)
hou_netbox.setAutoFit(False)
hou_netbox.setComment("RENDERS")
hou_netbox.setColor(hou.Color([0.306, 0.306, 0.306]))

# Initialize parent node variable.
if locals().get("hou_parent") is None:
    hou_parent = hou.node("/obj")

# Code for /obj/__netbox2
hou_netbox = hou_parent.createNetworkBox("__netbox2")
hou_netbox.setPosition(hou.Vector2(4.79798, -7.30809))
hou_netbox.setSize(hou.Vector2(9.28966, 10.407))
hou_netbox.setMinimized(False)
hou_netbox.setSelected(False)
hou_netbox.setAutoFit(False)
hou_netbox.setComment("FX")
hou_netbox.setColor(hou.Color([0.475, 0.812, 0.204]))

# Initialize parent node variable.
if locals().get("hou_parent") is None:
    hou_parent = hou.node("/obj")

# Code for /obj/__netbox1
hou_netbox = hou_parent.createNetworkBox("__netbox1")
hou_netbox.setPosition(hou.Vector2(-5.4812, -7.30809))
hou_netbox.setSize(hou.Vector2(9.28966, 10.407))
hou_netbox.setMinimized(False)
hou_netbox.setSelected(False)
hou_netbox.setAutoFit(False)
hou_netbox.setComment("ASSETS")
hou_netbox.setColor(hou.Color([0.094, 0.369, 0.69]))

# Code for /obj/FX
hou_node = hou_parent.createNode("geo", "FX", run_init_scripts=False, load_contents=True, exact_type_name=True)
hou_node.move(hou.Vector2(8.63726, 0.206975))
hou_node.setColor(hou.Color([0.29, 0.565, 0.886]))
if hou_parent.findNetworkBox("__netbox2") is not None:
    hou_parent.findNetworkBox("__netbox2").addNode(hou_node)
hou_node.setSelectableInViewport(True)
hou_node.showOrigin(False)
hou_node.useXray(False)
hou_node.setDisplayFlag(True)
hou_node.hide(False)
hou_node.setSelected(False)

hou_parm_template_group = hou.ParmTemplateGroup()
# Code for parameter template
hou_parm_template = hou.FolderParmTemplate("stdswitcher4", "Transform", folder_type=hou.folderType.Tabs, default_value=0, ends_tab_group=False)
# Code for parameter template
hou_parm_template2 = hou.MenuParmTemplate("xOrd", "Transform Order", menu_items=(["srt","str","rst","rts","tsr","trs"]), menu_labels=(["Scale Rot Trans","Scale Trans Rot","Rot Scale Trans","Rot Trans Scale","Trans Scale Rot","Trans Rot Scale"]), default_value=0, icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False, is_button_strip=False, strip_uses_icons=False)
hou_parm_template2.setJoinWithNext(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.MenuParmTemplate("rOrd", "Rotate Order", menu_items=(["xyz","xzy","yxz","yzx","zxy","zyx"]), menu_labels=(["Rx Ry Rz","Rx Rz Ry","Ry Rx Rz","Ry Rz Rx","Rz Rx Ry","Rz Ry Rx"]), default_value=0, icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False, is_button_strip=False, strip_uses_icons=False)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("t", "Translate", 3, default_value=([0, 0, 0]), min=0, max=10, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.XYZW)
hou_parm_template2.setTags({"autoscope": "1111111111111111111111111111111", "script_action": "import objecttoolutils\nobjecttoolutils.matchTransform(kwargs, 0)", "script_action_help": "Select an object to match the translation with.", "script_action_icon": "BUTTONS_match_transform"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("r", "Rotate", 3, default_value=([0, 0, 0]), min=0, max=360, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.XYZW)
hou_parm_template2.setTags({"autoscope": "1111111111111111111111111111111", "script_action": "import objecttoolutils\nobjecttoolutils.matchTransform(kwargs, 1)", "script_action_help": "Select an object to match the rotation with.", "script_action_icon": "BUTTONS_match_rotation"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("s", "Scale", 3, default_value=([1, 1, 1]), min=0, max=10, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.XYZW)
hou_parm_template2.setTags({"autoscope": "1111111111111111111111111111111", "script_action": "import objecttoolutils\nobjecttoolutils.matchTransform(kwargs, 2)", "script_action_help": "Select an object to match the scale with.", "script_action_icon": "BUTTONS_match_scale"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("p", "Pivot Translate", 3, default_value=([0, 0, 0]), min=0, max=10, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.XYZW)
hou_parm_template2.setTags({"script_action": "import objecttoolutils\nobjecttoolutils.matchTransform(kwargs, 3)", "script_action_help": "Select an object to match the pivot with.", "script_action_icon": "BUTTONS_match_pivot"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("pr", "Pivot Rotate", 3, default_value=([0, 0, 0]), min=0, max=10, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.XYZW)
hou_parm_template2.setTags({"script_action": "import objecttoolutils\nobjecttoolutils.matchTransform(kwargs, 4)", "script_action_help": "Select an object to match the pivot rotation with.", "script_action_icon": "BUTTONS_match_pivot_rotation"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("scale", "Uniform Scale", 1, default_value=([1]), min=0, max=10, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.MenuParmTemplate("pre_xform", "Modify Pre-Transform", menu_items=(["clean","cleantrans","cleanrot","cleanscales","extract","reset"]), menu_labels=(["Clean Transform","Clean Translates","Clean Rotates","Clean Scales","Extract Pre-transform","Reset Pre-transform"]), default_value=0, icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.StringReplace, menu_use_token=False, is_button_strip=False, strip_uses_icons=False)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("keeppos", "Keep Position When Parenting", default_value=False)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("childcomp", "Child Compensation", default_value=False)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("constraints_on", "Enable Constraints", default_value=False)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("constraints_path", "Constraints", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.NodeReference, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constraints_on == 0 }")
hou_parm_template2.setTags({"opfilter": "!!CHOP", "oprelative": ".", "script_action": "import objecttoolutils\nobjecttoolutils.constraintsMenu(kwargs)", "script_action_help": "", "script_action_icon": "BUTTONS_add_constraints"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("lookatpath", "Look At", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.NodeReference, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template2.hide(True)
hou_parm_template2.setTags({"opfilter": "!!OBJ!!", "oprelative": "."})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("lookupobjpath", "Look Up Object", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.NodeReference, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template2.hide(True)
hou_parm_template2.setTags({"opfilter": "!!OBJ!!", "oprelative": "."})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("lookup", "Look At Up Vector", 1, default_value=(["on"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=(["off","on","quat","pos","obj"]), menu_labels=(["Don't Use Up Vector","Use Up Vector","Use Quaternions","Use Global Position","Use Up Object"]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template2.hide(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("pathobjpath", "Path Object", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.NodeReference, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template2.hide(True)
hou_parm_template2.setTags({"opfilter": "!!SOP!!", "oprelative": "."})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("roll", "Roll", 1, default_value=([0]), min=-360, max=360, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Angle, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template2.hide(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("pos", "Position", 1, default_value=([0]), min=0, max=10, min_is_strict=True, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template2.hide(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.MenuParmTemplate("uparmtype", "Parameterization", menu_items=(["uniform","arc"]), menu_labels=(["Uniform","Arc Length"]), default_value=1, icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False, is_button_strip=False, strip_uses_icons=False)
hou_parm_template2.hide(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.IntParmTemplate("pathorient", "Orient Along Path", 1, default_value=([1]), min=0, max=1, min_is_strict=False, max_is_strict=False, naming_scheme=hou.parmNamingScheme.Base1, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False)
hou_parm_template2.hide(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("up", "Orient Up Vector", 3, default_value=([0, 1, 0]), min=0, max=10, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Vector, naming_scheme=hou.parmNamingScheme.XYZW)
hou_parm_template2.hide(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("bank", "Auto-Bank factor", 1, default_value=([0]), min=-1, max=1, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template2.hide(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
hou_parm_template_group.append(hou_parm_template)
# Code for parameter template
hou_parm_template = hou.FolderParmTemplate("stdswitcher4_1", "Render", folder_type=hou.folderType.Tabs, default_value=0, ends_tab_group=False)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("shop_materialpath", "Material", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.NodeReference, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template2.setTags({"opfilter": "!!CUSTOM/MATERIAL!!", "oprelative": "."})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.MenuParmTemplate("shop_materialopts", "Options", menu_items=([]), menu_labels=([]), default_value=0, icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Mini, menu_use_token=False, is_button_strip=False, strip_uses_icons=False)
hou_parm_template2.hide(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("tdisplay", "Display", default_value=False)
hou_parm_template2.setJoinWithNext(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.IntParmTemplate("display", "Display", 1, default_value=([1]), min=0, max=1, min_is_strict=True, max_is_strict=True, naming_scheme=hou.parmNamingScheme.Base1, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.MenuParmTemplate("viewportlod", "Display As", menu_items=(["full","points","box","centroid","hidden","subd"]), menu_labels=(["Full Geometry","Point Cloud","Bounding Box","Centroid","Hidden","Subdivision Surface / Curves"]), default_value=0, icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False, is_button_strip=False, strip_uses_icons=False)
hou_parm_template2.setHelp("Choose how the object's geometry should be rendered in the viewport")
hou_parm_template2.setTags({"spare_category": "Render"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("vm_rendervisibility", "Render Visibility", 1, default_value=(["*"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=(["*","primary","primary|shadow","-primary","-diffuse","-diffuse&-reflect&-refract",""]), menu_labels=(["Visible to all","Visible only to primary rays","Visible only to primary and shadow rays","Invisible to primary rays (Phantom)","Invisible to diffuse rays","Invisible to secondary rays","Invisible (Unrenderable)"]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.StringReplace)
hou_parm_template2.setTags({"mantra_class": "object", "mantra_name": "rendervisibility", "spare_category": "Render"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("vm_rendersubd", "Render Polygons As Subdivision (Mantra)", default_value=False)
hou_parm_template2.setTags({"mantra_class": "object", "mantra_name": "rendersubd", "spare_category": "Geometry"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("vm_subdstyle", "Subdivision Style", 1, default_value=(["mantra_catclark"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=(["mantra_catclark","osd_catclark"]), menu_labels=(["Mantra Catmull-Clark","OpenSubdiv Catmull-Clark"]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ vm_rendersubd == 0 }")
hou_parm_template2.setTags({"mantra_class": "object", "mantra_name": "subdstyle", "spare_category": "Geometry"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("vm_subdgroup", "Subdivision Group", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ vm_rendersubd == 0 }")
hou_parm_template2.setTags({"mantra_class": "object", "mantra_name": "subdgroup", "spare_category": "Geometry"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("vm_osd_quality", "Open Subdiv Quality", 1, default_value=([1]), min=0, max=10, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ vm_rendersubd == 0 vm_subdstyle != osd_catclark }")
hou_parm_template2.setTags({"mantra_class": "object", "mantra_name": "osd_quality", "spare_category": "Geometry"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.IntParmTemplate("vm_osd_vtxinterp", "OSD Vtx Interp", 1, default_value=([2]), min=0, max=10, min_is_strict=False, max_is_strict=False, naming_scheme=hou.parmNamingScheme.Base1, menu_items=(["0","1","2"]), menu_labels=(["No vertex interpolation","Edges only","Edges and Corners"]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False)
hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ vm_rendersubd == 0 vm_subdstyle != osd_catclark }")
hou_parm_template2.setTags({"mantra_class": "object", "mantra_name": "osd_vtxinterp", "spare_category": "Geometry"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.IntParmTemplate("vm_osd_fvarinterp", "OSD FVar Interp", 1, default_value=([4]), min=0, max=10, min_is_strict=False, max_is_strict=False, naming_scheme=hou.parmNamingScheme.Base1, menu_items=(["0","1","2","3","4","5"]), menu_labels=(["Smooth everywhere","Sharpen corners only","Sharpen edges and corners","Sharpen edges and propagated corners","Sharpen all boundaries","Bilinear interpolation"]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False)
hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ vm_rendersubd == 0 vm_subdstyle != osd_catclark }")
hou_parm_template2.setTags({"mantra_class": "object", "mantra_name": "osd_fvarinterp", "spare_category": "Geometry"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FolderParmTemplate("folder0", "Shading", folder_type=hou.folderType.Tabs, default_value=0, ends_tab_group=False)
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("categories", "Categories", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.setHelp("A list of tags which can be used to select the object")
hou_parm_template3.setTags({"spare_category": "Shading"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("reflectmask", "Reflection Mask", 1, default_value=(["*"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.NodeReferenceList, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.setHelp("Objects that will be reflected on this object.")
hou_parm_template3.setTags({"opexpand": "1", "opfilter": "!!OBJ/GEOMETRY!!", "oprelative": "/obj", "spare_category": "Shading"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("refractmask", "Refraction Mask", 1, default_value=(["*"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.NodeReferenceList, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.setHelp("Objects that will be refracted on this object.")
hou_parm_template3.setTags({"opexpand": "1", "opfilter": "!!OBJ/GEOMETRY!!", "oprelative": "/obj", "spare_category": "Shading"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("lightmask", "Light Mask", 1, default_value=(["*"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.NodeReferenceList, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.setHelp("Lights that illuminate this object.")
hou_parm_template3.setTags({"opexpand": "1", "opfilter": "!!OBJ/LIGHT!!", "oprelative": "/obj", "spare_category": "Shading"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("lightcategories", "Light Selection", 1, default_value=(["*"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.setTags({"spare_category": "Shading"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("vm_lpetag", "LPE Tag", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "lpetag", "spare_category": "Shading"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("vm_volumefilter", "Volume Filter", 1, default_value=(["box"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=(["box","gaussian","bartlett","catrom","hanning","blackman","sinc"]), menu_labels=(["Box Filter","Gaussian","Bartlett (triangle)","Catmull-Rom","Hanning","Blackman","Sinc (sharpening)"]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "filter", "spare_category": "Shading"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.FloatParmTemplate("vm_volumefilterwidth", "Volume Filter Width", 1, default_value=([1]), min=0.001, max=5, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "filterwidth", "spare_category": "Shading"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("vm_matte", "Matte shading", default_value=False)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "matte", "spare_category": "Shading"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("vm_rayshade", "Raytrace Shading", default_value=False)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "rayshade", "spare_category": "Shading"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FolderParmTemplate("folder0_1", "Sampling", folder_type=hou.folderType.Tabs, default_value=0, ends_tab_group=False)
# Code for parameter template
hou_parm_template3 = hou.MenuParmTemplate("geo_velocityblur", "Geometry Velocity Blur", menu_items=(["off","on","accelblur"]), menu_labels=(["No Velocity Blur","Velocity Blur","Acceleration Blur"]), default_value=0, icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False, is_button_strip=False, strip_uses_icons=False)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ allowmotionblur == 0 }")
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("geo_accelattribute", "Acceleration Attribute", 1, default_value=(["accel"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ geo_velocityblur != accelblur }")
hou_parm_template3.setTags({"spare_category": "Sampling"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FolderParmTemplate("folder0_2", "Dicing", folder_type=hou.folderType.Tabs, default_value=0, ends_tab_group=False)
# Code for parameter template
hou_parm_template3 = hou.FloatParmTemplate("vm_shadingquality", "Shading Quality", 1, default_value=([1]), min=0, max=10, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "shadingquality", "spare_category": "Dicing"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.FloatParmTemplate("vm_flatness", "Dicing Flatness", 1, default_value=([0.05]), min=0, max=1, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "flatness", "spare_category": "Dicing"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.IntParmTemplate("vm_raypredice", "Ray Predicing", 1, default_value=([0]), min=0, max=10, min_is_strict=False, max_is_strict=False, naming_scheme=hou.parmNamingScheme.Base1, menu_items=(["0","1","2"]), menu_labels=(["Disable Predicing","Full Predicing","Precompute Bounds"]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "raypredice", "spare_category": "Dicing"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("vm_curvesurface", "Shade Curves As Surfaces", default_value=False)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "curvesurface", "spare_category": "Dicing"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FolderParmTemplate("folder0_3", "Geometry", folder_type=hou.folderType.Tabs, default_value=0, ends_tab_group=False)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("vm_rmbackface", "Backface Removal", default_value=False)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "rmbackface", "spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("shop_geometrypath", "Procedural Shader", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.NodeReference, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.setTags({"opfilter": "!!SHOP/GEOMETRY!!", "oprelative": ".", "spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("vm_forcegeometry", "Force Procedural Geometry Output", default_value=True)
hou_parm_template3.setTags({"spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("vm_rendersubdcurves", "Render Polygon Curves As Subdivision (Mantra)", default_value=False)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "rendersubdcurves", "spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.IntParmTemplate("vm_renderpoints", "Render As Points (Mantra)", 1, default_value=([2]), min=0, max=10, min_is_strict=False, max_is_strict=False, naming_scheme=hou.parmNamingScheme.Base1, menu_items=(["0","1","2"]), menu_labels=(["No Point Rendering","Render Only Points","Render Unconnected Points"]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "renderpoints", "spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.IntParmTemplate("vm_renderpointsas", "Render Points As (Mantra)", 1, default_value=([0]), min=0, max=10, min_is_strict=False, max_is_strict=False, naming_scheme=hou.parmNamingScheme.Base1, menu_items=(["0","1"]), menu_labels=(["Spheres","Circles"]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vm_renderpoints == 0 }")
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "renderpointsas", "spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("vm_usenforpoints", "Use N For Point Rendering", default_value=False)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vm_renderpoints == 0 }")
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "usenforpoints", "spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.FloatParmTemplate("vm_pointscale", "Point Scale", 1, default_value=([1]), min=0, max=10, min_is_strict=True, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vm_renderpoints == 0 }")
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "pointscale", "spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("vm_pscalediameter", "Treat Point Scale as Diameter Instead of Radius", default_value=False)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "pscalediameter", "spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("vm_metavolume", "Metaballs as Volume", default_value=False)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "metavolume", "spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.IntParmTemplate("vm_coving", "Coving", 1, default_value=([1]), min=0, max=10, min_is_strict=False, max_is_strict=False, naming_scheme=hou.parmNamingScheme.Base1, menu_items=(["0","1","2"]), menu_labels=(["Disable Coving","Coving for displacement/sub-d","Coving for all primitives"]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "coving", "spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("vm_materialoverride", "Material Override", 1, default_value=(["compact"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=(["none","full","compact"]), menu_labels=(["Disabled","Evaluate for Each Primitve/Point","Evaluate Once"]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.setTags({"spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("vm_overridedetail", "Ignore Geometry Attribute Shaders", default_value=False)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "overridedetail", "spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("vm_procuseroottransform", "Proc Use Root Transform", default_value=True)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "procuseroottransform", "spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
hou_parm_template.addParmTemplate(hou_parm_template2)
hou_parm_template_group.append(hou_parm_template)
# Code for parameter template
hou_parm_template = hou.FolderParmTemplate("stdswitcher4_2", "Misc", folder_type=hou.folderType.Tabs, default_value=0, ends_tab_group=False)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("use_dcolor", "Set Wireframe Color", default_value=False)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("dcolor", "Wireframe Color", 3, default_value=([1, 1, 1]), min=0, max=1, min_is_strict=True, max_is_strict=True, look=hou.parmLook.ColorSquare, naming_scheme=hou.parmNamingScheme.RGBA)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("picking", "Viewport Selecting Enabled", default_value=True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("pickscript", "Select Script", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.FileReference, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.StringReplace)
hou_parm_template2.setTags({"filechooser_mode": "read"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("caching", "Cache Object Transform", default_value=True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("vport_shadeopen", "Shade Open Curves In Viewport", default_value=False)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("vport_displayassubdiv", "Display as Subdivision in Viewport", default_value=False)
hou_parm_template2.hide(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.MenuParmTemplate("vport_onionskin", "Onion Skinning", menu_items=(["off","xform","on"]), menu_labels=(["Off","Transform only","Full Deformation"]), default_value=0, icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False, is_button_strip=False, strip_uses_icons=False)
hou_parm_template.addParmTemplate(hou_parm_template2)
hou_parm_template_group.append(hou_parm_template)
hou_node.setParmTemplateGroup(hou_parm_template_group)
# Code for /obj/FX/stdswitcher1 parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm = hou_node.parm("stdswitcher1")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/FX/xOrd parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm = hou_node.parm("xOrd")
hou_parm.lock(False)
hou_parm.set("srt")
hou_parm.setAutoscope(False)


# Code for /obj/FX/rOrd parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm = hou_node.parm("rOrd")
hou_parm.lock(False)
hou_parm.set("xyz")
hou_parm.setAutoscope(False)


# Code for /obj/FX/t parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm_tuple = hou_node.parmTuple("t")
hou_parm_tuple.lock((False, False, False))
hou_parm_tuple.set((0, 0, 0))
hou_parm_tuple.setAutoscope((True, True, True))


# Code for /obj/FX/r parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm_tuple = hou_node.parmTuple("r")
hou_parm_tuple.lock((False, False, False))
hou_parm_tuple.set((0, 0, 0))
hou_parm_tuple.setAutoscope((True, True, True))


# Code for /obj/FX/s parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm_tuple = hou_node.parmTuple("s")
hou_parm_tuple.lock((False, False, False))
hou_parm_tuple.set((1, 1, 1))
hou_parm_tuple.setAutoscope((True, True, True))


# Code for /obj/FX/p parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm_tuple = hou_node.parmTuple("p")
hou_parm_tuple.lock((False, False, False))
hou_parm_tuple.set((0, 0, 0))
hou_parm_tuple.setAutoscope((False, False, False))


# Code for /obj/FX/pr parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm_tuple = hou_node.parmTuple("pr")
hou_parm_tuple.lock((False, False, False))
hou_parm_tuple.set((0, 0, 0))
hou_parm_tuple.setAutoscope((False, False, False))


# Code for /obj/FX/scale parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm = hou_node.parm("scale")
hou_parm.lock(False)
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/FX/pre_xform parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm = hou_node.parm("pre_xform")
hou_parm.lock(False)
hou_parm.set("clean")
hou_parm.setAutoscope(False)


# Code for /obj/FX/keeppos parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm = hou_node.parm("keeppos")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/FX/childcomp parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm = hou_node.parm("childcomp")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/FX/constraints_on parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm = hou_node.parm("constraints_on")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/FX/constraints_path parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm = hou_node.parm("constraints_path")
hou_parm.lock(False)
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/FX/lookatpath parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm = hou_node.parm("lookatpath")
hou_parm.lock(False)
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/FX/lookupobjpath parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm = hou_node.parm("lookupobjpath")
hou_parm.lock(False)
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/FX/lookup parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm = hou_node.parm("lookup")
hou_parm.lock(False)
hou_parm.set("on")
hou_parm.setAutoscope(False)


# Code for /obj/FX/pathobjpath parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm = hou_node.parm("pathobjpath")
hou_parm.lock(False)
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/FX/roll parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm = hou_node.parm("roll")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/FX/pos parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm = hou_node.parm("pos")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/FX/uparmtype parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm = hou_node.parm("uparmtype")
hou_parm.lock(False)
hou_parm.set("arc")
hou_parm.setAutoscope(False)


# Code for /obj/FX/pathorient parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm = hou_node.parm("pathorient")
hou_parm.lock(False)
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/FX/up parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm_tuple = hou_node.parmTuple("up")
hou_parm_tuple.lock((False, False, False))
hou_parm_tuple.set((0, 1, 0))
hou_parm_tuple.setAutoscope((False, False, False))


# Code for /obj/FX/bank parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm = hou_node.parm("bank")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/FX/shop_materialpath parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm = hou_node.parm("shop_materialpath")
hou_parm.lock(False)
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/FX/shop_materialopts parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm = hou_node.parm("shop_materialopts")
hou_parm.lock(False)
hou_parm.set("override")
hou_parm.setAutoscope(False)


# Code for /obj/FX/tdisplay parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm = hou_node.parm("tdisplay")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/FX/display parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm = hou_node.parm("display")
hou_parm.lock(False)
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/FX/use_dcolor parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm = hou_node.parm("use_dcolor")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/FX/dcolor parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm_tuple = hou_node.parmTuple("dcolor")
hou_parm_tuple.lock((False, False, False))
hou_parm_tuple.set((1, 1, 1))
hou_parm_tuple.setAutoscope((False, False, False))


# Code for /obj/FX/picking parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm = hou_node.parm("picking")
hou_parm.lock(False)
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/FX/pickscript parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm = hou_node.parm("pickscript")
hou_parm.lock(False)
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/FX/caching parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm = hou_node.parm("caching")
hou_parm.lock(False)
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/FX/vport_shadeopen parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm = hou_node.parm("vport_shadeopen")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/FX/vport_displayassubdiv parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm = hou_node.parm("vport_displayassubdiv")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/FX/vport_onionskin parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm = hou_node.parm("vport_onionskin")
hou_parm.lock(False)
hou_parm.set("off")
hou_parm.setAutoscope(False)


# Code for /obj/FX/stdswitcher41 parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm = hou_node.parm("stdswitcher41")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/FX/viewportlod parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm = hou_node.parm("viewportlod")
hou_parm.lock(False)
hou_parm.set("full")
hou_parm.setAutoscope(False)


# Code for /obj/FX/vm_rendervisibility parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm = hou_node.parm("vm_rendervisibility")
hou_parm.lock(False)
hou_parm.set("*")
hou_parm.setAutoscope(False)


# Code for /obj/FX/vm_rendersubd parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm = hou_node.parm("vm_rendersubd")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/FX/vm_subdstyle parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm = hou_node.parm("vm_subdstyle")
hou_parm.lock(False)
hou_parm.set("mantra_catclark")
hou_parm.setAutoscope(False)


# Code for /obj/FX/vm_subdgroup parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm = hou_node.parm("vm_subdgroup")
hou_parm.lock(False)
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/FX/vm_osd_quality parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm = hou_node.parm("vm_osd_quality")
hou_parm.lock(False)
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/FX/vm_osd_vtxinterp parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm = hou_node.parm("vm_osd_vtxinterp")
hou_parm.lock(False)
hou_parm.set(2)
hou_parm.setAutoscope(False)


# Code for /obj/FX/vm_osd_fvarinterp parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm = hou_node.parm("vm_osd_fvarinterp")
hou_parm.lock(False)
hou_parm.set(4)
hou_parm.setAutoscope(False)


# Code for /obj/FX/folder01 parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm = hou_node.parm("folder01")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/FX/categories parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm = hou_node.parm("categories")
hou_parm.lock(False)
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/FX/reflectmask parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm = hou_node.parm("reflectmask")
hou_parm.lock(False)
hou_parm.set("*")
hou_parm.setAutoscope(False)


# Code for /obj/FX/refractmask parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm = hou_node.parm("refractmask")
hou_parm.lock(False)
hou_parm.set("*")
hou_parm.setAutoscope(False)


# Code for /obj/FX/lightmask parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm = hou_node.parm("lightmask")
hou_parm.lock(False)
hou_parm.set("*")
hou_parm.setAutoscope(False)


# Code for /obj/FX/lightcategories parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm = hou_node.parm("lightcategories")
hou_parm.lock(False)
hou_parm.set("*")
hou_parm.setAutoscope(False)


# Code for /obj/FX/vm_lpetag parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm = hou_node.parm("vm_lpetag")
hou_parm.lock(False)
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/FX/vm_volumefilter parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm = hou_node.parm("vm_volumefilter")
hou_parm.lock(False)
hou_parm.set("box")
hou_parm.setAutoscope(False)


# Code for /obj/FX/vm_volumefilterwidth parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm = hou_node.parm("vm_volumefilterwidth")
hou_parm.lock(False)
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/FX/vm_matte parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm = hou_node.parm("vm_matte")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/FX/vm_rayshade parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm = hou_node.parm("vm_rayshade")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/FX/geo_velocityblur parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm = hou_node.parm("geo_velocityblur")
hou_parm.lock(False)
hou_parm.set("off")
hou_parm.setAutoscope(False)


# Code for /obj/FX/geo_accelattribute parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm = hou_node.parm("geo_accelattribute")
hou_parm.lock(False)
hou_parm.set("accel")
hou_parm.setAutoscope(False)


# Code for /obj/FX/vm_shadingquality parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm = hou_node.parm("vm_shadingquality")
hou_parm.lock(False)
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/FX/vm_flatness parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm = hou_node.parm("vm_flatness")
hou_parm.lock(False)
hou_parm.set(0.050000000000000003)
hou_parm.setAutoscope(False)


# Code for /obj/FX/vm_raypredice parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm = hou_node.parm("vm_raypredice")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/FX/vm_curvesurface parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm = hou_node.parm("vm_curvesurface")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/FX/vm_rmbackface parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm = hou_node.parm("vm_rmbackface")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/FX/shop_geometrypath parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm = hou_node.parm("shop_geometrypath")
hou_parm.lock(False)
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/FX/vm_forcegeometry parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm = hou_node.parm("vm_forcegeometry")
hou_parm.lock(False)
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/FX/vm_rendersubdcurves parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm = hou_node.parm("vm_rendersubdcurves")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/FX/vm_renderpoints parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm = hou_node.parm("vm_renderpoints")
hou_parm.lock(False)
hou_parm.set(2)
hou_parm.setAutoscope(False)


# Code for /obj/FX/vm_renderpointsas parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm = hou_node.parm("vm_renderpointsas")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/FX/vm_usenforpoints parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm = hou_node.parm("vm_usenforpoints")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/FX/vm_pointscale parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm = hou_node.parm("vm_pointscale")
hou_parm.lock(False)
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/FX/vm_pscalediameter parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm = hou_node.parm("vm_pscalediameter")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/FX/vm_metavolume parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm = hou_node.parm("vm_metavolume")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/FX/vm_coving parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm = hou_node.parm("vm_coving")
hou_parm.lock(False)
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/FX/vm_materialoverride parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm = hou_node.parm("vm_materialoverride")
hou_parm.lock(False)
hou_parm.set("compact")
hou_parm.setAutoscope(False)


# Code for /obj/FX/vm_overridedetail parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm = hou_node.parm("vm_overridedetail")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/FX/vm_procuseroottransform parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/FX")
hou_parm = hou_node.parm("vm_procuseroottransform")
hou_parm.lock(False)
hou_parm.set(1)
hou_parm.setAutoscope(False)


hou_node.setExpressionLanguage(hou.exprLanguage.Hscript)

hou_node.setUserData("___Version___", "17.5.425")
if hasattr(hou_node, "syncNodeVersionIfNeeded"):
    hou_node.syncNodeVersionIfNeeded("17.5.425")
# Update the parent node.
hou_parent = hou_node

# Initialize parent node variable.
if locals().get("hou_parent") is None:
    hou_parent = hou.node("/obj/FX")

# Code for /obj/FX/__netbox1
hou_netbox = hou_parent.createNetworkBox("__netbox1")
hou_netbox.setPosition(hou.Vector2(13.2079, 3.20339))
hou_netbox.setSize(hou.Vector2(46.6205, 15.7572))
hou_netbox.setMinimized(False)
hou_netbox.setSelected(False)
hou_netbox.setAutoFit(False)
hou_netbox.setComment("")
hou_netbox.setColor(hou.Color([0.29, 0.565, 0.886]))

# Initialize parent node variable.
if locals().get("hou_parent") is None:
    hou_parent = hou.node("/obj/FX")

# Code for /obj/FX/__netbox2
hou_netbox = hou_parent.createNetworkBox("__netbox2")
hou_netbox.setPosition(hou.Vector2(-4.04177, -53.2119))
hou_netbox.setSize(hou.Vector2(22.6231, 39.7785))
hou_netbox.setMinimized(False)
hou_netbox.setSelected(False)
hou_netbox.setAutoFit(False)
hou_netbox.setComment("")
hou_netbox.setColor(hou.Color([0.306, 0.306, 0.306]))

# Initialize parent node variable.
if locals().get("hou_parent") is None:
    hou_parent = hou.node("/obj/FX")

# Code for /obj/FX/__netbox5
hou_netbox = hou_parent.createNetworkBox("__netbox5")
hou_netbox.setPosition(hou.Vector2(12.7149, -80.9455))
hou_netbox.setSize(hou.Vector2(46.6205, 15.7572))
hou_netbox.setMinimized(False)
hou_netbox.setSelected(False)
hou_netbox.setAutoFit(False)
hou_netbox.setComment("")
hou_netbox.setColor(hou.Color([0.188, 0.529, 0.459]))

# Initialize parent node variable.
if locals().get("hou_parent") is None:
    hou_parent = hou.node("/obj/FX")

# Code for /obj/FX/__netbox6
hou_netbox = hou_parent.createNetworkBox("__netbox6")
hou_netbox.setPosition(hou.Vector2(25.3392, -53.2119))
hou_netbox.setSize(hou.Vector2(22.6231, 39.7785))
hou_netbox.setMinimized(False)
hou_netbox.setSelected(False)
hou_netbox.setAutoFit(False)
hou_netbox.setComment("")
hou_netbox.setColor(hou.Color([0.306, 0.306, 0.306]))

# Initialize parent node variable.
if locals().get("hou_parent") is None:
    hou_parent = hou.node("/obj/FX")

# Code for /obj/FX/__netbox7
hou_netbox = hou_parent.createNetworkBox("__netbox7")
hou_netbox.setPosition(hou.Vector2(55.9219, -53.2119))
hou_netbox.setSize(hou.Vector2(22.6231, 39.7785))
hou_netbox.setMinimized(False)
hou_netbox.setSelected(False)
hou_netbox.setAutoFit(False)
hou_netbox.setComment("")
hou_netbox.setColor(hou.Color([0.306, 0.306, 0.306]))


# Restore the parent and current nodes.
hou_parent = hou_parent.parent()
hou_node = hou_node.parent()

# Code for /obj/SHADERS
hou_node = hou_parent.createNode("matnet", "SHADERS", run_init_scripts=False, load_contents=True, exact_type_name=True)
hou_node.move(hou.Vector2(21.255, 1.81447))
if hou_parent.findNetworkBox("__netbox3") is not None:
    hou_parent.findNetworkBox("__netbox3").addNode(hou_node)
hou_node.hide(False)
hou_node.setSelected(False)
hou_node.setExpressionLanguage(hou.exprLanguage.Hscript)

hou_node.setUserData("___Version___", "17.5.425")
if hasattr(hou_node, "syncNodeVersionIfNeeded"):
    hou_node.syncNodeVersionIfNeeded("17.5.425")
# Update the parent node.
hou_parent = hou_node


# Restore the parent and current nodes.
hou_parent = hou_parent.parent()
hou_node = hou_node.parent()

# Code for /obj/Sun
hou_node = hou_parent.createNode("hlight::2.0", "Sun", run_init_scripts=False, load_contents=True, exact_type_name=True)
hou_node.move(hou.Vector2(21.2751, -0.145354))
if hou_parent.findNetworkBox("__netbox3") is not None:
    hou_parent.findNetworkBox("__netbox3").addNode(hou_node)
hou_node.setSelectableInViewport(True)
hou_node.showOrigin(False)
hou_node.useXray(False)
hou_node.setDisplayFlag(True)
hou_node.hide(False)
hou_node.setSelected(False)

# Code for /obj/Sun/stdswitcher1 parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("stdswitcher1")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/Sun/xOrd parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("xOrd")
hou_parm.lock(False)
hou_parm.set("srt")
hou_parm.setAutoscope(False)


# Code for /obj/Sun/rOrd parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("rOrd")
hou_parm.lock(False)
hou_parm.set("xyz")
hou_parm.setAutoscope(False)


# Code for /obj/Sun/t parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm_tuple = hou_node.parmTuple("t")
hou_parm_tuple.lock((False, False, False))
hou_parm_tuple.set((0, 0, 0))
hou_parm_tuple.setAutoscope((True, True, True))


# Code for /obj/Sun/r parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm_tuple = hou_node.parmTuple("r")
hou_parm_tuple.lock((False, False, False))
hou_parm_tuple.set((-45, 0, 0))
hou_parm_tuple.setAutoscope((True, True, True))


# Code for /obj/Sun/s parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm_tuple = hou_node.parmTuple("s")
hou_parm_tuple.lock((False, False, False))
hou_parm_tuple.set((1, 1, 1))
hou_parm_tuple.setAutoscope((True, True, True))

# Code for first keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setValue(1)
hou_keyframe.useValue(False)
hou_keyframe.setSlope(0)
hou_keyframe.useSlope(False)
hou_keyframe.setAccel(0)
hou_keyframe.useAccel(False)
hou_keyframe.setExpression("lock(1)", hou.exprLanguage.Hscript)
hou_parm_tuple[0].setKeyframe(hou_keyframe)

# Code for last keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setValue(1)
hou_keyframe.useValue(False)
hou_keyframe.setSlope(0)
hou_keyframe.useSlope(False)
hou_keyframe.setAccel(0)
hou_keyframe.useAccel(False)
hou_keyframe.setExpression("lock(1)", hou.exprLanguage.Hscript)
hou_parm_tuple[0].setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setValue(1)
hou_keyframe.useValue(False)
hou_keyframe.setSlope(0)
hou_keyframe.useSlope(False)
hou_keyframe.setAccel(0)
hou_keyframe.useAccel(False)
hou_keyframe.setExpression("lock(1)", hou.exprLanguage.Hscript)
hou_parm_tuple[0].setKeyframe(hou_keyframe)

# Code for first keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setValue(1)
hou_keyframe.useValue(False)
hou_keyframe.setSlope(0)
hou_keyframe.useSlope(False)
hou_keyframe.setAccel(0)
hou_keyframe.useAccel(False)
hou_keyframe.setExpression("lock(1)", hou.exprLanguage.Hscript)
hou_parm_tuple[1].setKeyframe(hou_keyframe)

# Code for last keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setValue(1)
hou_keyframe.useValue(False)
hou_keyframe.setSlope(0)
hou_keyframe.useSlope(False)
hou_keyframe.setAccel(0)
hou_keyframe.useAccel(False)
hou_keyframe.setExpression("lock(1)", hou.exprLanguage.Hscript)
hou_parm_tuple[1].setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setValue(1)
hou_keyframe.useValue(False)
hou_keyframe.setSlope(0)
hou_keyframe.useSlope(False)
hou_keyframe.setAccel(0)
hou_keyframe.useAccel(False)
hou_keyframe.setExpression("lock(1)", hou.exprLanguage.Hscript)
hou_parm_tuple[1].setKeyframe(hou_keyframe)

# Code for first keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setValue(1)
hou_keyframe.useValue(False)
hou_keyframe.setSlope(0)
hou_keyframe.useSlope(False)
hou_keyframe.setAccel(0)
hou_keyframe.useAccel(False)
hou_keyframe.setExpression("lock(1)", hou.exprLanguage.Hscript)
hou_parm_tuple[2].setKeyframe(hou_keyframe)

# Code for last keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setValue(1)
hou_keyframe.useValue(False)
hou_keyframe.setSlope(0)
hou_keyframe.useSlope(False)
hou_keyframe.setAccel(0)
hou_keyframe.useAccel(False)
hou_keyframe.setExpression("lock(1)", hou.exprLanguage.Hscript)
hou_parm_tuple[2].setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setValue(1)
hou_keyframe.useValue(False)
hou_keyframe.setSlope(0)
hou_keyframe.useSlope(False)
hou_keyframe.setAccel(0)
hou_keyframe.useAccel(False)
hou_keyframe.setExpression("lock(1)", hou.exprLanguage.Hscript)
hou_parm_tuple[2].setKeyframe(hou_keyframe)


# Code for /obj/Sun/p parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm_tuple = hou_node.parmTuple("p")
hou_parm_tuple.lock((False, False, False))
hou_parm_tuple.set((0, 0, 0))
hou_parm_tuple.setAutoscope((False, False, False))


# Code for /obj/Sun/pr parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm_tuple = hou_node.parmTuple("pr")
hou_parm_tuple.lock((False, False, False))
hou_parm_tuple.set((0, 0, 0))
hou_parm_tuple.setAutoscope((False, False, False))


# Code for /obj/Sun/scale parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("scale")
hou_parm.lock(False)
hou_parm.set(1)
hou_parm.setAutoscope(False)

# Code for first keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setValue(1)
hou_keyframe.useValue(False)
hou_keyframe.setSlope(0)
hou_keyframe.useSlope(False)
hou_keyframe.setAccel(0)
hou_keyframe.useAccel(False)
hou_keyframe.setExpression("lock(1)", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for last keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setValue(1)
hou_keyframe.useValue(False)
hou_keyframe.setSlope(0)
hou_keyframe.useSlope(False)
hou_keyframe.setAccel(0)
hou_keyframe.useAccel(False)
hou_keyframe.setExpression("lock(1)", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setValue(1)
hou_keyframe.useValue(False)
hou_keyframe.setSlope(0)
hou_keyframe.useSlope(False)
hou_keyframe.setAccel(0)
hou_keyframe.useAccel(False)
hou_keyframe.setExpression("lock(1)", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setValue(1)
hou_keyframe.useValue(False)
hou_keyframe.setSlope(0)
hou_keyframe.useSlope(False)
hou_keyframe.setAccel(0)
hou_keyframe.useAccel(False)
hou_keyframe.setExpression("lock(1)", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)


# Code for /obj/Sun/pre_xform parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("pre_xform")
hou_parm.lock(False)
hou_parm.set("clean")
hou_parm.setAutoscope(False)


# Code for /obj/Sun/keeppos parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("keeppos")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/Sun/childcomp parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("childcomp")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/Sun/constraints_on parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("constraints_on")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/Sun/constraints_path parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("constraints_path")
hou_parm.lock(False)
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/Sun/lookatpath parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("lookatpath")
hou_parm.lock(False)
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/Sun/lookupobjpath parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("lookupobjpath")
hou_parm.lock(False)
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/Sun/lookup parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("lookup")
hou_parm.lock(False)
hou_parm.set("on")
hou_parm.setAutoscope(False)


# Code for /obj/Sun/pathobjpath parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("pathobjpath")
hou_parm.lock(False)
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/Sun/roll parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("roll")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/Sun/pos parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("pos")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/Sun/uparmtype parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("uparmtype")
hou_parm.lock(False)
hou_parm.set("arc")
hou_parm.setAutoscope(False)


# Code for /obj/Sun/pathorient parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("pathorient")
hou_parm.lock(False)
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/Sun/up parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm_tuple = hou_node.parmTuple("up")
hou_parm_tuple.lock((False, False, False))
hou_parm_tuple.set((0, 1, 0))
hou_parm_tuple.setAutoscope((False, False, False))


# Code for /obj/Sun/bank parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("bank")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/Sun/tdisplay parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("tdisplay")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/Sun/display parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("display")
hou_parm.lock(False)
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/Sun/dimmer parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("dimmer")
hou_parm.lock(False)
hou_parm.set(1)
hou_parm.setAutoscope(True)

# Code for first keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setValue(1)
hou_keyframe.useValue(False)
hou_keyframe.setSlope(0)
hou_keyframe.useSlope(False)
hou_keyframe.setAccel(0)
hou_keyframe.useAccel(False)
hou_keyframe.setExpression("ch(\"./l_dimmer\")", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for last keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setValue(1)
hou_keyframe.useValue(False)
hou_keyframe.setSlope(0)
hou_keyframe.useSlope(False)
hou_keyframe.setAccel(0)
hou_keyframe.useAccel(False)
hou_keyframe.setExpression("ch(\"./l_dimmer\")", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setValue(1)
hou_keyframe.useValue(False)
hou_keyframe.setSlope(0)
hou_keyframe.useSlope(False)
hou_keyframe.setAccel(0)
hou_keyframe.useAccel(False)
hou_keyframe.setExpression("ch(\"./l_dimmer\")", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setValue(1)
hou_keyframe.useValue(False)
hou_keyframe.setSlope(0)
hou_keyframe.useSlope(False)
hou_keyframe.setAccel(0)
hou_keyframe.useAccel(False)
hou_keyframe.setExpression("ch(\"./l_dimmer\")", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)


# Code for /obj/Sun/picking parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("picking")
hou_parm.lock(False)
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/Sun/pickscript parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("pickscript")
hou_parm.lock(False)
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/Sun/caching parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("caching")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/Sun/use_dcolor parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("use_dcolor")
hou_parm.lock(False)
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/Sun/dcolor parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm_tuple = hou_node.parmTuple("dcolor")
hou_parm_tuple.lock((False, False, False))
hou_parm_tuple.set((1, 1, 1))
hou_parm_tuple.setAutoscope((False, False, False))


# Code for /obj/Sun/stdswitcher41 parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("stdswitcher41")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/Sun/folder0_11 parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("folder0_11")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/Sun/light_enable parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("light_enable")
hou_parm.lock(False)
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/Sun/ogl_enablelight parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("ogl_enablelight")
hou_parm.lock(False)
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/Sun/light_type parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("light_type")
hou_parm.lock(False)
hou_parm.set("distant")
hou_parm.setAutoscope(False)


# Code for /obj/Sun/light_color parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm_tuple = hou_node.parmTuple("light_color")
hou_parm_tuple.lock((False, False, False))
hou_parm_tuple.set((1, 1, 1))
hou_parm_tuple.setAutoscope((False, False, False))


# Code for /obj/Sun/light_intensity parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("light_intensity")
hou_parm.lock(False)
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/Sun/light_exposure parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("light_exposure")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/Sun/light_contrib parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("light_contrib")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/Sun/categories parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("categories")
hou_parm.lock(False)
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/Sun/vm_lpetag parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("vm_lpetag")
hou_parm.lock(False)
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/Sun/vm_samplingquality parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("vm_samplingquality")
hou_parm.lock(False)
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/Sun/light_contribprimary parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("light_contribprimary")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/Sun/atten_folder_11 parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("atten_folder_11")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/Sun/coneenable parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("coneenable")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/Sun/light_conefov parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("light_conefov")
hou_parm.lock(False)
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/Sun/light_fov parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("light_fov")
hou_parm.lock(False)
hou_parm.set(45)
hou_parm.setAutoscope(False)


# Code for /obj/Sun/coneangle parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("coneangle")
hou_parm.lock(False)
hou_parm.set(45)
hou_parm.setAutoscope(False)


# Code for /obj/Sun/conedelta parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("conedelta")
hou_parm.lock(False)
hou_parm.set(10)
hou_parm.setAutoscope(False)


# Code for /obj/Sun/coneroll parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("coneroll")
hou_parm.lock(False)
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/Sun/projmap parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("projmap")
hou_parm.lock(False)
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/Sun/near parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("near")
hou_parm.lock(False)
hou_parm.set(0.001)
hou_parm.setAutoscope(False)


# Code for /obj/Sun/far parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("far")
hou_parm.lock(False)
hou_parm.set(10000)
hou_parm.setAutoscope(False)


# Code for /obj/Sun/areamap parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("areamap")
hou_parm.lock(False)
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/Sun/areamapspace parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("areamapspace")
hou_parm.lock(False)
hou_parm.set("space:object")
hou_parm.setAutoscope(False)


# Code for /obj/Sun/areamapnull parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("areamapnull")
hou_parm.lock(False)
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/Sun/areamapblur parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("areamapblur")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/Sun/areamapscale parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("areamapscale")
hou_parm.lock(False)
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/Sun/areasize parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm_tuple = hou_node.parmTuple("areasize")
hou_parm_tuple.lock((False, False))
hou_parm_tuple.set((1, 1))
hou_parm_tuple.setAutoscope((False, False))


# Code for /obj/Sun/normalizearea parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("normalizearea")
hou_parm.lock(False)
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/Sun/singlesided parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("singlesided")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/Sun/reverse parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("reverse")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/Sun/sharpspot parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("sharpspot")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/Sun/selfshadow parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("selfshadow")
hou_parm.lock(False)
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/Sun/shop_materialpath parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("shop_materialpath")
hou_parm.lock(False)
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/Sun/light_texture parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("light_texture")
hou_parm.lock(False)
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/Sun/edgeenable parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("edgeenable")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/Sun/edgewidth parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("edgewidth")
hou_parm.lock(False)
hou_parm.set(0.10000000000000001)
hou_parm.setAutoscope(False)


# Code for /obj/Sun/edgerolloff parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("edgerolloff")
hou_parm.lock(False)
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/Sun/areageometry parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("areageometry")
hou_parm.lock(False)
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/Sun/intothisobject parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("intothisobject")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/Sun/pc_enable parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("pc_enable")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/Sun/pc_samples parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("pc_samples")
hou_parm.lock(False)
hou_parm.set(16)
hou_parm.setAutoscope(False)


# Code for /obj/Sun/pc_file parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("pc_file")
hou_parm.lock(False)
hou_parm.set("temp:$OS.pc")
hou_parm.setAutoscope(False)


# Code for /obj/Sun/render_pointcloud parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("render_pointcloud")
hou_parm.lock(False)
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/Sun/vm_shadingfactor parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("vm_shadingfactor")
hou_parm.lock(False)
hou_parm.set(0.5)
hou_parm.setAutoscope(False)


# Code for /obj/Sun/pc_camera_override parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("pc_camera_override")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/Sun/pc_camera parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("pc_camera")
hou_parm.lock(False)
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/Sun/orthowidth parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("orthowidth")
hou_parm.lock(False)
hou_parm.set(2)
hou_parm.setAutoscope(False)


# Code for /obj/Sun/vm_envangle parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("vm_envangle")
hou_parm.lock(False)
hou_parm.set(5)
hou_parm.setAutoscope(False)


# Code for /obj/Sun/atten_type parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("atten_type")
hou_parm.lock(False)
hou_parm.set("physical")
hou_parm.setAutoscope(False)


# Code for /obj/Sun/atten_dist parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("atten_dist")
hou_parm.lock(False)
hou_parm.set(10)
hou_parm.setAutoscope(False)


# Code for /obj/Sun/atten_start parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("atten_start")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/Sun/activeradiusenable parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("activeradiusenable")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/Sun/activeradius parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("activeradius")
hou_parm.lock(False)
hou_parm.set(100)
hou_parm.setAutoscope(False)


# Code for /obj/Sun/attenrampenable parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("attenrampenable")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/Sun/atten_rampstart parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("atten_rampstart")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/Sun/atten_rampend parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("atten_rampend")
hou_parm.lock(False)
hou_parm.set(100)
hou_parm.setAutoscope(False)


# Code for /obj/Sun/attenramp parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("attenramp")
hou_parm.lock(False)
hou_parm.set(3)
hou_parm.setAutoscope(False)


# Code for /obj/Sun/shadow_type parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("shadow_type")
hou_parm.lock(False)
hou_parm.set("raytrace")
hou_parm.setAutoscope(False)


# Code for /obj/Sun/shadowmask parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("shadowmask")
hou_parm.lock(False)
hou_parm.set("*")
hou_parm.setAutoscope(False)


# Code for /obj/Sun/shadowcategories parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("shadowcategories")
hou_parm.lock(False)
hou_parm.set("-noshadow")
hou_parm.setAutoscope(False)


# Code for /obj/Sun/shadow_intensity parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("shadow_intensity")
hou_parm.lock(False)
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/Sun/shadow_color parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm_tuple = hou_node.parmTuple("shadow_color")
hou_parm_tuple.lock((False, False, False))
hou_parm_tuple.set((0, 0, 0))
hou_parm_tuple.setAutoscope((False, False, False))


# Code for /obj/Sun/shadow_transparent parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("shadow_transparent")
hou_parm.lock(False)
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/Sun/shadow_bias parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("shadow_bias")
hou_parm.lock(False)
hou_parm.set(0.050000000000000003)
hou_parm.setAutoscope(False)


# Code for /obj/Sun/shadow_quality parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("shadow_quality")
hou_parm.lock(False)
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/Sun/shadow_softness parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("shadow_softness")
hou_parm.lock(False)
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/Sun/shadow_blur parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("shadow_blur")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/Sun/render_shadowmap parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("render_shadowmap")
hou_parm.lock(False)
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/Sun/shadowmap_file parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("shadowmap_file")
hou_parm.lock(False)
hou_parm.set("temp:$OS.rat")
hou_parm.setAutoscope(False)


# Code for /obj/Sun/res parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm_tuple = hou_node.parmTuple("res")
hou_parm_tuple.lock((False, False))
hou_parm_tuple.set((512, 512))
hou_parm_tuple.setAutoscope((False, False))


# Code for /obj/Sun/shadowmap_resMenu parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("shadowmap_resMenu")
hou_parm.lock(False)
hou_parm.set("128")
hou_parm.setAutoscope(False)


# Code for /obj/Sun/shadowmap_samples parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm_tuple = hou_node.parmTuple("shadowmap_samples")
hou_parm_tuple.lock((False, False))
hou_parm_tuple.set((2, 2))
hou_parm_tuple.setAutoscope((False, False))


# Code for /obj/Sun/shadowmotionblur parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("shadowmotionblur")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/Sun/shadow_autofit parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("shadow_autofit")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/Sun/iconscale parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("iconscale")
hou_parm.lock(False)
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/Sun/l_dimmer parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("l_dimmer")
hou_parm.lock(False)
hou_parm.set(1)
hou_parm.setAutoscope(True)

# Code for first keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setValue(0)
hou_keyframe.useValue(False)
hou_keyframe.setSlope(0)
hou_keyframe.useSlope(False)
hou_keyframe.setAccel(0)
hou_keyframe.useAccel(False)
hou_keyframe.setExpression("if(ch(\"./light_enable\"), ch(\"./light_intensity\"), 0)", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for last keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setValue(0)
hou_keyframe.useValue(False)
hou_keyframe.setSlope(0)
hou_keyframe.useSlope(False)
hou_keyframe.setAccel(0)
hou_keyframe.useAccel(False)
hou_keyframe.setExpression("if(ch(\"./light_enable\"), ch(\"./light_intensity\"), 0)", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setValue(0)
hou_keyframe.useValue(False)
hou_keyframe.setSlope(0)
hou_keyframe.useSlope(False)
hou_keyframe.setAccel(0)
hou_keyframe.useAccel(False)
hou_keyframe.setExpression("if(ch(\"./light_enable\"), ch(\"./light_intensity\"), 0)", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setValue(0)
hou_keyframe.useValue(False)
hou_keyframe.setSlope(0)
hou_keyframe.useSlope(False)
hou_keyframe.setAccel(0)
hou_keyframe.useAccel(False)
hou_keyframe.setExpression("if(ch(\"./light_enable\"), ch(\"./light_intensity\"), 0)", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)


# Code for /obj/Sun/focal parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("focal")
hou_parm.lock(False)
hou_parm.set(1)
hou_parm.setAutoscope(False)

# Code for first keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setValue(0)
hou_keyframe.useValue(False)
hou_keyframe.setSlope(0)
hou_keyframe.useSlope(False)
hou_keyframe.setAccel(0)
hou_keyframe.useAccel(False)
hou_keyframe.setExpression("lock(1)", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for last keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setValue(0)
hou_keyframe.useValue(False)
hou_keyframe.setSlope(0)
hou_keyframe.useSlope(False)
hou_keyframe.setAccel(0)
hou_keyframe.useAccel(False)
hou_keyframe.setExpression("lock(1)", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setValue(0)
hou_keyframe.useValue(False)
hou_keyframe.setSlope(0)
hou_keyframe.useSlope(False)
hou_keyframe.setAccel(0)
hou_keyframe.useAccel(False)
hou_keyframe.setExpression("lock(1)", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setValue(0)
hou_keyframe.useValue(False)
hou_keyframe.setSlope(0)
hou_keyframe.useSlope(False)
hou_keyframe.setAccel(0)
hou_keyframe.useAccel(False)
hou_keyframe.setExpression("lock(1)", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)


# Code for /obj/Sun/aperture parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("aperture")
hou_parm.lock(False)
hou_parm.set(1)
hou_parm.setAutoscope(False)

# Code for first keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setValue(0)
hou_keyframe.useValue(False)
hou_keyframe.setSlope(0)
hou_keyframe.useSlope(False)
hou_keyframe.setAccel(0)
hou_keyframe.useAccel(False)
hou_keyframe.setExpression("if(ch('coneenable')==0 || ch('light_conefov') == 0, if(strcmp(chs('light_type'), 'distant') == 0 || strcmp(chs('light_type'), 'sun') == 0, 1, 2*tan(0.5*ch('light_fov'))), 2*tan(ch('conedelta')+0.5*ch('coneangle')))", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for last keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setValue(0)
hou_keyframe.useValue(False)
hou_keyframe.setSlope(0)
hou_keyframe.useSlope(False)
hou_keyframe.setAccel(0)
hou_keyframe.useAccel(False)
hou_keyframe.setExpression("if(ch('coneenable')==0 || ch('light_conefov') == 0, if(strcmp(chs('light_type'), 'distant') == 0 || strcmp(chs('light_type'), 'sun') == 0, 1, 2*tan(0.5*ch('light_fov'))), 2*tan(ch('conedelta')+0.5*ch('coneangle')))", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setValue(0)
hou_keyframe.useValue(False)
hou_keyframe.setSlope(0)
hou_keyframe.useSlope(False)
hou_keyframe.setAccel(0)
hou_keyframe.useAccel(False)
hou_keyframe.setExpression("if(ch('coneenable')==0 || ch('light_conefov') == 0, if(strcmp(chs('light_type'), 'distant') == 0 || strcmp(chs('light_type'), 'sun') == 0, 1, 2*tan(0.5*ch('light_fov'))), 2*tan(ch('conedelta')+0.5*ch('coneangle')))", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setValue(0)
hou_keyframe.useValue(False)
hou_keyframe.setSlope(0)
hou_keyframe.useSlope(False)
hou_keyframe.setAccel(0)
hou_keyframe.useAccel(False)
hou_keyframe.setExpression("if(ch('coneenable')==0 || ch('light_conefov') == 0, if(strcmp(chs('light_type'), 'distant') == 0 || strcmp(chs('light_type'), 'sun') == 0, 1, 2*tan(0.5*ch('light_fov'))), 2*tan(ch('conedelta')+0.5*ch('coneangle')))", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)


# Code for /obj/Sun/projection2 parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("projection2")
hou_parm.lock(False)
hou_parm.set("ortho")
hou_parm.setAutoscope(False)

# Code for first keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setValue(0)
hou_keyframe.useValue(False)
hou_keyframe.setSlope(0)
hou_keyframe.useSlope(False)
hou_keyframe.setAccel(0)
hou_keyframe.useAccel(False)
hou_keyframe.setExpression("if(strcmp(chs('light_type'), 'distant')==0 || strcmp(chs('light_type'), 'sun')==0, 1, 0)", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for last keyframe.
# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setValue(0)
hou_keyframe.useValue(False)
hou_keyframe.setSlope(0)
hou_keyframe.useSlope(False)
hou_keyframe.setAccel(0)
hou_keyframe.useAccel(False)
hou_keyframe.setExpression("if(strcmp(chs('light_type'), 'distant')==0 || strcmp(chs('light_type'), 'sun')==0, 1, 0)", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setValue(0)
hou_keyframe.useValue(False)
hou_keyframe.setSlope(0)
hou_keyframe.useSlope(False)
hou_keyframe.setAccel(0)
hou_keyframe.useAccel(False)
hou_keyframe.setExpression("if(strcmp(chs('light_type'), 'distant')==0 || strcmp(chs('light_type'), 'sun')==0, 1, 0)", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)

# Code for keyframe.
hou_keyframe = hou.Keyframe()
hou_keyframe.setTime(0)
hou_keyframe.setValue(0)
hou_keyframe.useValue(False)
hou_keyframe.setSlope(0)
hou_keyframe.useSlope(False)
hou_keyframe.setAccel(0)
hou_keyframe.useAccel(False)
hou_keyframe.setExpression("if(strcmp(chs('light_type'), 'distant')==0 || strcmp(chs('light_type'), 'sun')==0, 1, 0)", hou.exprLanguage.Hscript)
hou_parm.setKeyframe(hou_keyframe)


# Code for /obj/Sun/focus parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("focus")
hou_parm.lock(False)
hou_parm.set(10)
hou_parm.setAutoscope(False)


# Code for /obj/Sun/winmask parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("winmask")
hou_parm.lock(False)
hou_parm.set("`ifs(ch('shadow_autofit') && ch('coneenable') && strcmp(chs('shadow_type'), 'depthmap') == 0 && strcmp(chs('shadowmask'), '*')!=0, chs('shadowmask'), '')`")
hou_parm.setAutoscope(False)


# Code for /obj/Sun/light_wrangler parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("light_wrangler")
hou_parm.lock(False)
hou_parm.set("HoudiniLight")
hou_parm.setAutoscope(False)


# Code for /obj/Sun/clampprojmap parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("clampprojmap")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/Sun/areafullsphere parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("areafullsphere")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/Sun/attenramp1pos parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("attenramp1pos")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/Sun/attenramp1c parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm_tuple = hou_node.parmTuple("attenramp1c")
hou_parm_tuple.lock((False, False, False))
hou_parm_tuple.set((1, 1, 1))
hou_parm_tuple.setAutoscope((False, False, False))


# Code for /obj/Sun/attenramp1interp parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("attenramp1interp")
hou_parm.lock(False)
hou_parm.set("linear")
hou_parm.setAutoscope(False)


# Code for /obj/Sun/attenramp2pos parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("attenramp2pos")
hou_parm.lock(False)
hou_parm.set(0.89999997600000003)
hou_parm.setAutoscope(False)


# Code for /obj/Sun/attenramp2c parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm_tuple = hou_node.parmTuple("attenramp2c")
hou_parm_tuple.lock((False, False, False))
hou_parm_tuple.set((1, 1, 1))
hou_parm_tuple.setAutoscope((False, False, False))


# Code for /obj/Sun/attenramp2interp parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("attenramp2interp")
hou_parm.lock(False)
hou_parm.set("linear")
hou_parm.setAutoscope(False)


# Code for /obj/Sun/attenramp3pos parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("attenramp3pos")
hou_parm.lock(False)
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/Sun/attenramp3c parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm_tuple = hou_node.parmTuple("attenramp3c")
hou_parm_tuple.lock((False, False, False))
hou_parm_tuple.set((0, 0, 0))
hou_parm_tuple.setAutoscope((False, False, False))


# Code for /obj/Sun/attenramp3interp parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/Sun")
hou_parm = hou_node.parm("attenramp3interp")
hou_parm.lock(False)
hou_parm.set("linear")
hou_parm.setAutoscope(False)


hou_node.setExpressionLanguage(hou.exprLanguage.Hscript)

hou_node.setUserData("___toolid___", "object_pointlight")
hou_node.setUserData("___Version___", "1")
hou_node.setUserData("___toolcount___", "1")
if hasattr(hou_node, "syncNodeVersionIfNeeded"):
    hou_node.syncNodeVersionIfNeeded("1")
# Code for /obj/RENDER_
hou_node = hou_parent.createNode("geo", "RENDER_", run_init_scripts=False, load_contents=True, exact_type_name=True)
hou_node.move(hou.Vector2(16.3332, 1.12108))
if hou_parent.findNetworkBox("__netbox3") is not None:
    hou_parent.findNetworkBox("__netbox3").addNode(hou_node)
hou_node.setSelectableInViewport(True)
hou_node.showOrigin(False)
hou_node.useXray(False)
hou_node.setDisplayFlag(True)
hou_node.hide(False)
hou_node.setSelected(False)

hou_parm_template_group = hou.ParmTemplateGroup()
# Code for parameter template
hou_parm_template = hou.FolderParmTemplate("stdswitcher4", "Transform", folder_type=hou.folderType.Tabs, default_value=0, ends_tab_group=False)
# Code for parameter template
hou_parm_template2 = hou.MenuParmTemplate("xOrd", "Transform Order", menu_items=(["srt","str","rst","rts","tsr","trs"]), menu_labels=(["Scale Rot Trans","Scale Trans Rot","Rot Scale Trans","Rot Trans Scale","Trans Scale Rot","Trans Rot Scale"]), default_value=0, icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False, is_button_strip=False, strip_uses_icons=False)
hou_parm_template2.setJoinWithNext(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.MenuParmTemplate("rOrd", "Rotate Order", menu_items=(["xyz","xzy","yxz","yzx","zxy","zyx"]), menu_labels=(["Rx Ry Rz","Rx Rz Ry","Ry Rx Rz","Ry Rz Rx","Rz Rx Ry","Rz Ry Rx"]), default_value=0, icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False, is_button_strip=False, strip_uses_icons=False)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("t", "Translate", 3, default_value=([0, 0, 0]), min=0, max=10, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.XYZW)
hou_parm_template2.setTags({"autoscope": "1111111111111111111111111111111", "script_action": "import objecttoolutils\nobjecttoolutils.matchTransform(kwargs, 0)", "script_action_help": "Select an object to match the translation with.", "script_action_icon": "BUTTONS_match_transform"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("r", "Rotate", 3, default_value=([0, 0, 0]), min=0, max=360, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.XYZW)
hou_parm_template2.setTags({"autoscope": "1111111111111111111111111111111", "script_action": "import objecttoolutils\nobjecttoolutils.matchTransform(kwargs, 1)", "script_action_help": "Select an object to match the rotation with.", "script_action_icon": "BUTTONS_match_rotation"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("s", "Scale", 3, default_value=([1, 1, 1]), min=0, max=10, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.XYZW)
hou_parm_template2.setTags({"autoscope": "1111111111111111111111111111111", "script_action": "import objecttoolutils\nobjecttoolutils.matchTransform(kwargs, 2)", "script_action_help": "Select an object to match the scale with.", "script_action_icon": "BUTTONS_match_scale"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("p", "Pivot Translate", 3, default_value=([0, 0, 0]), min=0, max=10, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.XYZW)
hou_parm_template2.setTags({"script_action": "import objecttoolutils\nobjecttoolutils.matchTransform(kwargs, 3)", "script_action_help": "Select an object to match the pivot with.", "script_action_icon": "BUTTONS_match_pivot"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("pr", "Pivot Rotate", 3, default_value=([0, 0, 0]), min=0, max=10, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.XYZW)
hou_parm_template2.setTags({"script_action": "import objecttoolutils\nobjecttoolutils.matchTransform(kwargs, 4)", "script_action_help": "Select an object to match the pivot rotation with.", "script_action_icon": "BUTTONS_match_pivot_rotation"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("scale", "Uniform Scale", 1, default_value=([1]), min=0, max=10, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.MenuParmTemplate("pre_xform", "Modify Pre-Transform", menu_items=(["clean","cleantrans","cleanrot","cleanscales","extract","reset"]), menu_labels=(["Clean Transform","Clean Translates","Clean Rotates","Clean Scales","Extract Pre-transform","Reset Pre-transform"]), default_value=0, icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.StringReplace, menu_use_token=False, is_button_strip=False, strip_uses_icons=False)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("keeppos", "Keep Position When Parenting", default_value=False)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("childcomp", "Child Compensation", default_value=False)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("constraints_on", "Enable Constraints", default_value=False)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("constraints_path", "Constraints", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.NodeReference, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constraints_on == 0 }")
hou_parm_template2.setTags({"opfilter": "!!CHOP", "oprelative": ".", "script_action": "import objecttoolutils\nobjecttoolutils.constraintsMenu(kwargs)", "script_action_help": "", "script_action_icon": "BUTTONS_add_constraints"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("lookatpath", "Look At", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.NodeReference, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template2.hide(True)
hou_parm_template2.setTags({"opfilter": "!!OBJ!!", "oprelative": "."})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("lookupobjpath", "Look Up Object", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.NodeReference, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template2.hide(True)
hou_parm_template2.setTags({"opfilter": "!!OBJ!!", "oprelative": "."})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("lookup", "Look At Up Vector", 1, default_value=(["on"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=(["off","on","quat","pos","obj"]), menu_labels=(["Don't Use Up Vector","Use Up Vector","Use Quaternions","Use Global Position","Use Up Object"]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template2.hide(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("pathobjpath", "Path Object", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.NodeReference, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template2.hide(True)
hou_parm_template2.setTags({"opfilter": "!!SOP!!", "oprelative": "."})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("roll", "Roll", 1, default_value=([0]), min=-360, max=360, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Angle, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template2.hide(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("pos", "Position", 1, default_value=([0]), min=0, max=10, min_is_strict=True, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template2.hide(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.MenuParmTemplate("uparmtype", "Parameterization", menu_items=(["uniform","arc"]), menu_labels=(["Uniform","Arc Length"]), default_value=1, icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False, is_button_strip=False, strip_uses_icons=False)
hou_parm_template2.hide(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.IntParmTemplate("pathorient", "Orient Along Path", 1, default_value=([1]), min=0, max=1, min_is_strict=False, max_is_strict=False, naming_scheme=hou.parmNamingScheme.Base1, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False)
hou_parm_template2.hide(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("up", "Orient Up Vector", 3, default_value=([0, 1, 0]), min=0, max=10, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Vector, naming_scheme=hou.parmNamingScheme.XYZW)
hou_parm_template2.hide(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("bank", "Auto-Bank factor", 1, default_value=([0]), min=-1, max=1, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template2.hide(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
hou_parm_template_group.append(hou_parm_template)
# Code for parameter template
hou_parm_template = hou.FolderParmTemplate("stdswitcher4_1", "Render", folder_type=hou.folderType.Tabs, default_value=0, ends_tab_group=False)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("shop_materialpath", "Material", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.NodeReference, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template2.setTags({"opfilter": "!!CUSTOM/MATERIAL!!", "oprelative": "."})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.MenuParmTemplate("shop_materialopts", "Options", menu_items=([]), menu_labels=([]), default_value=0, icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Mini, menu_use_token=False, is_button_strip=False, strip_uses_icons=False)
hou_parm_template2.hide(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("tdisplay", "Display", default_value=False)
hou_parm_template2.setJoinWithNext(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.IntParmTemplate("display", "Display", 1, default_value=([1]), min=0, max=1, min_is_strict=True, max_is_strict=True, naming_scheme=hou.parmNamingScheme.Base1, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.MenuParmTemplate("viewportlod", "Display As", menu_items=(["full","points","box","centroid","hidden","subd"]), menu_labels=(["Full Geometry","Point Cloud","Bounding Box","Centroid","Hidden","Subdivision Surface / Curves"]), default_value=0, icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False, is_button_strip=False, strip_uses_icons=False)
hou_parm_template2.setHelp("Choose how the object's geometry should be rendered in the viewport")
hou_parm_template2.setTags({"spare_category": "Render"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("vm_rendervisibility", "Render Visibility", 1, default_value=(["*"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=(["*","primary","primary|shadow","-primary","-diffuse","-diffuse&-reflect&-refract",""]), menu_labels=(["Visible to all","Visible only to primary rays","Visible only to primary and shadow rays","Invisible to primary rays (Phantom)","Invisible to diffuse rays","Invisible to secondary rays","Invisible (Unrenderable)"]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.StringReplace)
hou_parm_template2.setTags({"mantra_class": "object", "mantra_name": "rendervisibility", "spare_category": "Render"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("vm_rendersubd", "Render Polygons As Subdivision (Mantra)", default_value=False)
hou_parm_template2.setTags({"mantra_class": "object", "mantra_name": "rendersubd", "spare_category": "Geometry"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("vm_subdstyle", "Subdivision Style", 1, default_value=(["mantra_catclark"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=(["mantra_catclark","osd_catclark"]), menu_labels=(["Mantra Catmull-Clark","OpenSubdiv Catmull-Clark"]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ vm_rendersubd == 0 }")
hou_parm_template2.setTags({"mantra_class": "object", "mantra_name": "subdstyle", "spare_category": "Geometry"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("vm_subdgroup", "Subdivision Group", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ vm_rendersubd == 0 }")
hou_parm_template2.setTags({"mantra_class": "object", "mantra_name": "subdgroup", "spare_category": "Geometry"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("vm_osd_quality", "Open Subdiv Quality", 1, default_value=([1]), min=0, max=10, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ vm_rendersubd == 0 vm_subdstyle != osd_catclark }")
hou_parm_template2.setTags({"mantra_class": "object", "mantra_name": "osd_quality", "spare_category": "Geometry"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.IntParmTemplate("vm_osd_vtxinterp", "OSD Vtx Interp", 1, default_value=([2]), min=0, max=10, min_is_strict=False, max_is_strict=False, naming_scheme=hou.parmNamingScheme.Base1, menu_items=(["0","1","2"]), menu_labels=(["No vertex interpolation","Edges only","Edges and Corners"]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False)
hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ vm_rendersubd == 0 vm_subdstyle != osd_catclark }")
hou_parm_template2.setTags({"mantra_class": "object", "mantra_name": "osd_vtxinterp", "spare_category": "Geometry"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.IntParmTemplate("vm_osd_fvarinterp", "OSD FVar Interp", 1, default_value=([4]), min=0, max=10, min_is_strict=False, max_is_strict=False, naming_scheme=hou.parmNamingScheme.Base1, menu_items=(["0","1","2","3","4","5"]), menu_labels=(["Smooth everywhere","Sharpen corners only","Sharpen edges and corners","Sharpen edges and propagated corners","Sharpen all boundaries","Bilinear interpolation"]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False)
hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ vm_rendersubd == 0 vm_subdstyle != osd_catclark }")
hou_parm_template2.setTags({"mantra_class": "object", "mantra_name": "osd_fvarinterp", "spare_category": "Geometry"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FolderParmTemplate("folder0", "Shading", folder_type=hou.folderType.Tabs, default_value=0, ends_tab_group=False)
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("categories", "Categories", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.setHelp("A list of tags which can be used to select the object")
hou_parm_template3.setTags({"spare_category": "Shading"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("reflectmask", "Reflection Mask", 1, default_value=(["*"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.NodeReferenceList, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.setHelp("Objects that will be reflected on this object.")
hou_parm_template3.setTags({"opexpand": "1", "opfilter": "!!OBJ/GEOMETRY!!", "oprelative": "/obj", "spare_category": "Shading"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("refractmask", "Refraction Mask", 1, default_value=(["*"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.NodeReferenceList, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.setHelp("Objects that will be refracted on this object.")
hou_parm_template3.setTags({"opexpand": "1", "opfilter": "!!OBJ/GEOMETRY!!", "oprelative": "/obj", "spare_category": "Shading"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("lightmask", "Light Mask", 1, default_value=(["*"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.NodeReferenceList, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.setHelp("Lights that illuminate this object.")
hou_parm_template3.setTags({"opexpand": "1", "opfilter": "!!OBJ/LIGHT!!", "oprelative": "/obj", "spare_category": "Shading"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("lightcategories", "Light Selection", 1, default_value=(["*"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.setTags({"spare_category": "Shading"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("vm_lpetag", "LPE Tag", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "lpetag", "spare_category": "Shading"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("vm_volumefilter", "Volume Filter", 1, default_value=(["box"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=(["box","gaussian","bartlett","catrom","hanning","blackman","sinc"]), menu_labels=(["Box Filter","Gaussian","Bartlett (triangle)","Catmull-Rom","Hanning","Blackman","Sinc (sharpening)"]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "filter", "spare_category": "Shading"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.FloatParmTemplate("vm_volumefilterwidth", "Volume Filter Width", 1, default_value=([1]), min=0.001, max=5, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "filterwidth", "spare_category": "Shading"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("vm_matte", "Matte shading", default_value=False)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "matte", "spare_category": "Shading"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("vm_rayshade", "Raytrace Shading", default_value=False)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "rayshade", "spare_category": "Shading"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FolderParmTemplate("folder0_1", "Sampling", folder_type=hou.folderType.Tabs, default_value=0, ends_tab_group=False)
# Code for parameter template
hou_parm_template3 = hou.MenuParmTemplate("geo_velocityblur", "Geometry Velocity Blur", menu_items=(["off","on","accelblur"]), menu_labels=(["No Velocity Blur","Velocity Blur","Acceleration Blur"]), default_value=0, icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False, is_button_strip=False, strip_uses_icons=False)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ allowmotionblur == 0 }")
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("geo_accelattribute", "Acceleration Attribute", 1, default_value=(["accel"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ geo_velocityblur != accelblur }")
hou_parm_template3.setTags({"spare_category": "Sampling"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FolderParmTemplate("folder0_2", "Dicing", folder_type=hou.folderType.Tabs, default_value=0, ends_tab_group=False)
# Code for parameter template
hou_parm_template3 = hou.FloatParmTemplate("vm_shadingquality", "Shading Quality", 1, default_value=([1]), min=0, max=10, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "shadingquality", "spare_category": "Dicing"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.FloatParmTemplate("vm_flatness", "Dicing Flatness", 1, default_value=([0.05]), min=0, max=1, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "flatness", "spare_category": "Dicing"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.IntParmTemplate("vm_raypredice", "Ray Predicing", 1, default_value=([0]), min=0, max=10, min_is_strict=False, max_is_strict=False, naming_scheme=hou.parmNamingScheme.Base1, menu_items=(["0","1","2"]), menu_labels=(["Disable Predicing","Full Predicing","Precompute Bounds"]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "raypredice", "spare_category": "Dicing"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("vm_curvesurface", "Shade Curves As Surfaces", default_value=False)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "curvesurface", "spare_category": "Dicing"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FolderParmTemplate("folder0_3", "Geometry", folder_type=hou.folderType.Tabs, default_value=0, ends_tab_group=False)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("vm_rmbackface", "Backface Removal", default_value=False)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "rmbackface", "spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("shop_geometrypath", "Procedural Shader", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.NodeReference, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.setTags({"opfilter": "!!SHOP/GEOMETRY!!", "oprelative": ".", "spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("vm_forcegeometry", "Force Procedural Geometry Output", default_value=True)
hou_parm_template3.setTags({"spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("vm_rendersubdcurves", "Render Polygon Curves As Subdivision (Mantra)", default_value=False)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "rendersubdcurves", "spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.IntParmTemplate("vm_renderpoints", "Render As Points (Mantra)", 1, default_value=([2]), min=0, max=10, min_is_strict=False, max_is_strict=False, naming_scheme=hou.parmNamingScheme.Base1, menu_items=(["0","1","2"]), menu_labels=(["No Point Rendering","Render Only Points","Render Unconnected Points"]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "renderpoints", "spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.IntParmTemplate("vm_renderpointsas", "Render Points As (Mantra)", 1, default_value=([0]), min=0, max=10, min_is_strict=False, max_is_strict=False, naming_scheme=hou.parmNamingScheme.Base1, menu_items=(["0","1"]), menu_labels=(["Spheres","Circles"]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vm_renderpoints == 0 }")
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "renderpointsas", "spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("vm_usenforpoints", "Use N For Point Rendering", default_value=False)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vm_renderpoints == 0 }")
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "usenforpoints", "spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.FloatParmTemplate("vm_pointscale", "Point Scale", 1, default_value=([1]), min=0, max=10, min_is_strict=True, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vm_renderpoints == 0 }")
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "pointscale", "spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("vm_pscalediameter", "Treat Point Scale as Diameter Instead of Radius", default_value=False)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "pscalediameter", "spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("vm_metavolume", "Metaballs as Volume", default_value=False)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "metavolume", "spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.IntParmTemplate("vm_coving", "Coving", 1, default_value=([1]), min=0, max=10, min_is_strict=False, max_is_strict=False, naming_scheme=hou.parmNamingScheme.Base1, menu_items=(["0","1","2"]), menu_labels=(["Disable Coving","Coving for displacement/sub-d","Coving for all primitives"]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "coving", "spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("vm_materialoverride", "Material Override", 1, default_value=(["compact"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=(["none","full","compact"]), menu_labels=(["Disabled","Evaluate for Each Primitve/Point","Evaluate Once"]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.setTags({"spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("vm_overridedetail", "Ignore Geometry Attribute Shaders", default_value=False)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "overridedetail", "spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("vm_procuseroottransform", "Proc Use Root Transform", default_value=True)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "procuseroottransform", "spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
hou_parm_template.addParmTemplate(hou_parm_template2)
hou_parm_template_group.append(hou_parm_template)
# Code for parameter template
hou_parm_template = hou.FolderParmTemplate("stdswitcher4_2", "Misc", folder_type=hou.folderType.Tabs, default_value=0, ends_tab_group=False)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("use_dcolor", "Set Wireframe Color", default_value=False)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("dcolor", "Wireframe Color", 3, default_value=([1, 1, 1]), min=0, max=1, min_is_strict=True, max_is_strict=True, look=hou.parmLook.ColorSquare, naming_scheme=hou.parmNamingScheme.RGBA)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("picking", "Viewport Selecting Enabled", default_value=True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("pickscript", "Select Script", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.FileReference, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.StringReplace)
hou_parm_template2.setTags({"filechooser_mode": "read"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("caching", "Cache Object Transform", default_value=True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("vport_shadeopen", "Shade Open Curves In Viewport", default_value=False)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("vport_displayassubdiv", "Display as Subdivision in Viewport", default_value=False)
hou_parm_template2.hide(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.MenuParmTemplate("vport_onionskin", "Onion Skinning", menu_items=(["off","xform","on"]), menu_labels=(["Off","Transform only","Full Deformation"]), default_value=0, icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False, is_button_strip=False, strip_uses_icons=False)
hou_parm_template.addParmTemplate(hou_parm_template2)
hou_parm_template_group.append(hou_parm_template)
hou_node.setParmTemplateGroup(hou_parm_template_group)
# Code for /obj/RENDER_/stdswitcher1 parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm = hou_node.parm("stdswitcher1")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/RENDER_/xOrd parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm = hou_node.parm("xOrd")
hou_parm.lock(False)
hou_parm.set("srt")
hou_parm.setAutoscope(False)


# Code for /obj/RENDER_/rOrd parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm = hou_node.parm("rOrd")
hou_parm.lock(False)
hou_parm.set("xyz")
hou_parm.setAutoscope(False)


# Code for /obj/RENDER_/t parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm_tuple = hou_node.parmTuple("t")
hou_parm_tuple.lock((False, False, False))
hou_parm_tuple.set((0, 0, 0))
hou_parm_tuple.setAutoscope((True, True, True))


# Code for /obj/RENDER_/r parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm_tuple = hou_node.parmTuple("r")
hou_parm_tuple.lock((False, False, False))
hou_parm_tuple.set((0, 0, 0))
hou_parm_tuple.setAutoscope((True, True, True))


# Code for /obj/RENDER_/s parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm_tuple = hou_node.parmTuple("s")
hou_parm_tuple.lock((False, False, False))
hou_parm_tuple.set((1, 1, 1))
hou_parm_tuple.setAutoscope((True, True, True))


# Code for /obj/RENDER_/p parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm_tuple = hou_node.parmTuple("p")
hou_parm_tuple.lock((False, False, False))
hou_parm_tuple.set((0, 0, 0))
hou_parm_tuple.setAutoscope((False, False, False))


# Code for /obj/RENDER_/pr parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm_tuple = hou_node.parmTuple("pr")
hou_parm_tuple.lock((False, False, False))
hou_parm_tuple.set((0, 0, 0))
hou_parm_tuple.setAutoscope((False, False, False))


# Code for /obj/RENDER_/scale parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm = hou_node.parm("scale")
hou_parm.lock(False)
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/RENDER_/pre_xform parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm = hou_node.parm("pre_xform")
hou_parm.lock(False)
hou_parm.set("clean")
hou_parm.setAutoscope(False)


# Code for /obj/RENDER_/keeppos parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm = hou_node.parm("keeppos")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/RENDER_/childcomp parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm = hou_node.parm("childcomp")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/RENDER_/constraints_on parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm = hou_node.parm("constraints_on")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/RENDER_/constraints_path parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm = hou_node.parm("constraints_path")
hou_parm.lock(False)
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/RENDER_/lookatpath parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm = hou_node.parm("lookatpath")
hou_parm.lock(False)
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/RENDER_/lookupobjpath parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm = hou_node.parm("lookupobjpath")
hou_parm.lock(False)
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/RENDER_/lookup parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm = hou_node.parm("lookup")
hou_parm.lock(False)
hou_parm.set("on")
hou_parm.setAutoscope(False)


# Code for /obj/RENDER_/pathobjpath parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm = hou_node.parm("pathobjpath")
hou_parm.lock(False)
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/RENDER_/roll parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm = hou_node.parm("roll")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/RENDER_/pos parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm = hou_node.parm("pos")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/RENDER_/uparmtype parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm = hou_node.parm("uparmtype")
hou_parm.lock(False)
hou_parm.set("arc")
hou_parm.setAutoscope(False)


# Code for /obj/RENDER_/pathorient parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm = hou_node.parm("pathorient")
hou_parm.lock(False)
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/RENDER_/up parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm_tuple = hou_node.parmTuple("up")
hou_parm_tuple.lock((False, False, False))
hou_parm_tuple.set((0, 1, 0))
hou_parm_tuple.setAutoscope((False, False, False))


# Code for /obj/RENDER_/bank parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm = hou_node.parm("bank")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/RENDER_/shop_materialpath parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm = hou_node.parm("shop_materialpath")
hou_parm.lock(False)
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/RENDER_/shop_materialopts parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm = hou_node.parm("shop_materialopts")
hou_parm.lock(False)
hou_parm.set("override")
hou_parm.setAutoscope(False)


# Code for /obj/RENDER_/tdisplay parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm = hou_node.parm("tdisplay")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/RENDER_/display parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm = hou_node.parm("display")
hou_parm.lock(False)
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/RENDER_/use_dcolor parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm = hou_node.parm("use_dcolor")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/RENDER_/dcolor parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm_tuple = hou_node.parmTuple("dcolor")
hou_parm_tuple.lock((False, False, False))
hou_parm_tuple.set((1, 1, 1))
hou_parm_tuple.setAutoscope((False, False, False))


# Code for /obj/RENDER_/picking parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm = hou_node.parm("picking")
hou_parm.lock(False)
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/RENDER_/pickscript parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm = hou_node.parm("pickscript")
hou_parm.lock(False)
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/RENDER_/caching parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm = hou_node.parm("caching")
hou_parm.lock(False)
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/RENDER_/vport_shadeopen parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm = hou_node.parm("vport_shadeopen")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/RENDER_/vport_displayassubdiv parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm = hou_node.parm("vport_displayassubdiv")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/RENDER_/vport_onionskin parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm = hou_node.parm("vport_onionskin")
hou_parm.lock(False)
hou_parm.set("off")
hou_parm.setAutoscope(False)


# Code for /obj/RENDER_/stdswitcher41 parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm = hou_node.parm("stdswitcher41")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/RENDER_/viewportlod parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm = hou_node.parm("viewportlod")
hou_parm.lock(False)
hou_parm.set("full")
hou_parm.setAutoscope(False)


# Code for /obj/RENDER_/vm_rendervisibility parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm = hou_node.parm("vm_rendervisibility")
hou_parm.lock(False)
hou_parm.set("*")
hou_parm.setAutoscope(False)


# Code for /obj/RENDER_/vm_rendersubd parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm = hou_node.parm("vm_rendersubd")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/RENDER_/vm_subdstyle parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm = hou_node.parm("vm_subdstyle")
hou_parm.lock(False)
hou_parm.set("mantra_catclark")
hou_parm.setAutoscope(False)


# Code for /obj/RENDER_/vm_subdgroup parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm = hou_node.parm("vm_subdgroup")
hou_parm.lock(False)
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/RENDER_/vm_osd_quality parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm = hou_node.parm("vm_osd_quality")
hou_parm.lock(False)
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/RENDER_/vm_osd_vtxinterp parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm = hou_node.parm("vm_osd_vtxinterp")
hou_parm.lock(False)
hou_parm.set(2)
hou_parm.setAutoscope(False)


# Code for /obj/RENDER_/vm_osd_fvarinterp parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm = hou_node.parm("vm_osd_fvarinterp")
hou_parm.lock(False)
hou_parm.set(4)
hou_parm.setAutoscope(False)


# Code for /obj/RENDER_/folder01 parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm = hou_node.parm("folder01")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/RENDER_/categories parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm = hou_node.parm("categories")
hou_parm.lock(False)
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/RENDER_/reflectmask parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm = hou_node.parm("reflectmask")
hou_parm.lock(False)
hou_parm.set("*")
hou_parm.setAutoscope(False)


# Code for /obj/RENDER_/refractmask parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm = hou_node.parm("refractmask")
hou_parm.lock(False)
hou_parm.set("*")
hou_parm.setAutoscope(False)


# Code for /obj/RENDER_/lightmask parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm = hou_node.parm("lightmask")
hou_parm.lock(False)
hou_parm.set("*")
hou_parm.setAutoscope(False)


# Code for /obj/RENDER_/lightcategories parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm = hou_node.parm("lightcategories")
hou_parm.lock(False)
hou_parm.set("*")
hou_parm.setAutoscope(False)


# Code for /obj/RENDER_/vm_lpetag parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm = hou_node.parm("vm_lpetag")
hou_parm.lock(False)
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/RENDER_/vm_volumefilter parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm = hou_node.parm("vm_volumefilter")
hou_parm.lock(False)
hou_parm.set("box")
hou_parm.setAutoscope(False)


# Code for /obj/RENDER_/vm_volumefilterwidth parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm = hou_node.parm("vm_volumefilterwidth")
hou_parm.lock(False)
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/RENDER_/vm_matte parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm = hou_node.parm("vm_matte")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/RENDER_/vm_rayshade parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm = hou_node.parm("vm_rayshade")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/RENDER_/geo_velocityblur parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm = hou_node.parm("geo_velocityblur")
hou_parm.lock(False)
hou_parm.set("off")
hou_parm.setAutoscope(False)


# Code for /obj/RENDER_/geo_accelattribute parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm = hou_node.parm("geo_accelattribute")
hou_parm.lock(False)
hou_parm.set("accel")
hou_parm.setAutoscope(False)


# Code for /obj/RENDER_/vm_shadingquality parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm = hou_node.parm("vm_shadingquality")
hou_parm.lock(False)
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/RENDER_/vm_flatness parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm = hou_node.parm("vm_flatness")
hou_parm.lock(False)
hou_parm.set(0.050000000000000003)
hou_parm.setAutoscope(False)


# Code for /obj/RENDER_/vm_raypredice parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm = hou_node.parm("vm_raypredice")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/RENDER_/vm_curvesurface parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm = hou_node.parm("vm_curvesurface")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/RENDER_/vm_rmbackface parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm = hou_node.parm("vm_rmbackface")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/RENDER_/shop_geometrypath parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm = hou_node.parm("shop_geometrypath")
hou_parm.lock(False)
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/RENDER_/vm_forcegeometry parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm = hou_node.parm("vm_forcegeometry")
hou_parm.lock(False)
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/RENDER_/vm_rendersubdcurves parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm = hou_node.parm("vm_rendersubdcurves")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/RENDER_/vm_renderpoints parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm = hou_node.parm("vm_renderpoints")
hou_parm.lock(False)
hou_parm.set(2)
hou_parm.setAutoscope(False)


# Code for /obj/RENDER_/vm_renderpointsas parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm = hou_node.parm("vm_renderpointsas")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/RENDER_/vm_usenforpoints parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm = hou_node.parm("vm_usenforpoints")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/RENDER_/vm_pointscale parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm = hou_node.parm("vm_pointscale")
hou_parm.lock(False)
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/RENDER_/vm_pscalediameter parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm = hou_node.parm("vm_pscalediameter")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/RENDER_/vm_metavolume parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm = hou_node.parm("vm_metavolume")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/RENDER_/vm_coving parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm = hou_node.parm("vm_coving")
hou_parm.lock(False)
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/RENDER_/vm_materialoverride parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm = hou_node.parm("vm_materialoverride")
hou_parm.lock(False)
hou_parm.set("compact")
hou_parm.setAutoscope(False)


# Code for /obj/RENDER_/vm_overridedetail parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm = hou_node.parm("vm_overridedetail")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/RENDER_/vm_procuseroottransform parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/RENDER_")
hou_parm = hou_node.parm("vm_procuseroottransform")
hou_parm.lock(False)
hou_parm.set(1)
hou_parm.setAutoscope(False)


hou_node.setColor(hou.Color([0, 0, 0]))
hou_node.setExpressionLanguage(hou.exprLanguage.Hscript)

hou_node.setUserData("___Version___", "17.5.425")
if hasattr(hou_node, "syncNodeVersionIfNeeded"):
    hou_node.syncNodeVersionIfNeeded("17.5.425")
# Update the parent node.
hou_parent = hou_node


# Restore the parent and current nodes.
hou_parent = hou_parent.parent()
hou_node = hou_node.parent()

# Code for /obj/PUBLISH
hou_node = hou_parent.createNode("geo", "PUBLISH", run_init_scripts=False, load_contents=True, exact_type_name=True)
hou_node.move(hou.Vector2(29.1696, -1.40581))
hou_node.setColor(hou.Color([1, 0.725, 0]))
if hou_parent.findNetworkBox("__netbox4") is not None:
    hou_parent.findNetworkBox("__netbox4").addNode(hou_node)
hou_node.setSelectableInViewport(True)
hou_node.showOrigin(False)
hou_node.useXray(False)
hou_node.setDisplayFlag(True)
hou_node.hide(False)
hou_node.setSelected(False)

hou_parm_template_group = hou.ParmTemplateGroup()
# Code for parameter template
hou_parm_template = hou.FolderParmTemplate("stdswitcher4", "Transform", folder_type=hou.folderType.Tabs, default_value=0, ends_tab_group=False)
# Code for parameter template
hou_parm_template2 = hou.MenuParmTemplate("xOrd", "Transform Order", menu_items=(["srt","str","rst","rts","tsr","trs"]), menu_labels=(["Scale Rot Trans","Scale Trans Rot","Rot Scale Trans","Rot Trans Scale","Trans Scale Rot","Trans Rot Scale"]), default_value=0, icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False, is_button_strip=False, strip_uses_icons=False)
hou_parm_template2.setJoinWithNext(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.MenuParmTemplate("rOrd", "Rotate Order", menu_items=(["xyz","xzy","yxz","yzx","zxy","zyx"]), menu_labels=(["Rx Ry Rz","Rx Rz Ry","Ry Rx Rz","Ry Rz Rx","Rz Rx Ry","Rz Ry Rx"]), default_value=0, icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False, is_button_strip=False, strip_uses_icons=False)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("t", "Translate", 3, default_value=([0, 0, 0]), min=0, max=10, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.XYZW)
hou_parm_template2.setTags({"autoscope": "1111111111111111111111111111111", "script_action": "import objecttoolutils\nobjecttoolutils.matchTransform(kwargs, 0)", "script_action_help": "Select an object to match the translation with.", "script_action_icon": "BUTTONS_match_transform"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("r", "Rotate", 3, default_value=([0, 0, 0]), min=0, max=360, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.XYZW)
hou_parm_template2.setTags({"autoscope": "1111111111111111111111111111111", "script_action": "import objecttoolutils\nobjecttoolutils.matchTransform(kwargs, 1)", "script_action_help": "Select an object to match the rotation with.", "script_action_icon": "BUTTONS_match_rotation"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("s", "Scale", 3, default_value=([1, 1, 1]), min=0, max=10, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.XYZW)
hou_parm_template2.setTags({"autoscope": "1111111111111111111111111111111", "script_action": "import objecttoolutils\nobjecttoolutils.matchTransform(kwargs, 2)", "script_action_help": "Select an object to match the scale with.", "script_action_icon": "BUTTONS_match_scale"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("p", "Pivot Translate", 3, default_value=([0, 0, 0]), min=0, max=10, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.XYZW)
hou_parm_template2.setTags({"script_action": "import objecttoolutils\nobjecttoolutils.matchTransform(kwargs, 3)", "script_action_help": "Select an object to match the pivot with.", "script_action_icon": "BUTTONS_match_pivot"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("pr", "Pivot Rotate", 3, default_value=([0, 0, 0]), min=0, max=10, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.XYZW)
hou_parm_template2.setTags({"script_action": "import objecttoolutils\nobjecttoolutils.matchTransform(kwargs, 4)", "script_action_help": "Select an object to match the pivot rotation with.", "script_action_icon": "BUTTONS_match_pivot_rotation"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("scale", "Uniform Scale", 1, default_value=([1]), min=0, max=10, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.MenuParmTemplate("pre_xform", "Modify Pre-Transform", menu_items=(["clean","cleantrans","cleanrot","cleanscales","extract","reset"]), menu_labels=(["Clean Transform","Clean Translates","Clean Rotates","Clean Scales","Extract Pre-transform","Reset Pre-transform"]), default_value=0, icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.StringReplace, menu_use_token=False, is_button_strip=False, strip_uses_icons=False)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("keeppos", "Keep Position When Parenting", default_value=False)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("childcomp", "Child Compensation", default_value=False)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("constraints_on", "Enable Constraints", default_value=False)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("constraints_path", "Constraints", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.NodeReference, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constraints_on == 0 }")
hou_parm_template2.setTags({"opfilter": "!!CHOP", "oprelative": ".", "script_action": "import objecttoolutils\nobjecttoolutils.constraintsMenu(kwargs)", "script_action_help": "", "script_action_icon": "BUTTONS_add_constraints"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("lookatpath", "Look At", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.NodeReference, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template2.hide(True)
hou_parm_template2.setTags({"opfilter": "!!OBJ!!", "oprelative": "."})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("lookupobjpath", "Look Up Object", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.NodeReference, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template2.hide(True)
hou_parm_template2.setTags({"opfilter": "!!OBJ!!", "oprelative": "."})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("lookup", "Look At Up Vector", 1, default_value=(["on"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=(["off","on","quat","pos","obj"]), menu_labels=(["Don't Use Up Vector","Use Up Vector","Use Quaternions","Use Global Position","Use Up Object"]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template2.hide(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("pathobjpath", "Path Object", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.NodeReference, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template2.hide(True)
hou_parm_template2.setTags({"opfilter": "!!SOP!!", "oprelative": "."})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("roll", "Roll", 1, default_value=([0]), min=-360, max=360, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Angle, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template2.hide(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("pos", "Position", 1, default_value=([0]), min=0, max=10, min_is_strict=True, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template2.hide(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.MenuParmTemplate("uparmtype", "Parameterization", menu_items=(["uniform","arc"]), menu_labels=(["Uniform","Arc Length"]), default_value=1, icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False, is_button_strip=False, strip_uses_icons=False)
hou_parm_template2.hide(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.IntParmTemplate("pathorient", "Orient Along Path", 1, default_value=([1]), min=0, max=1, min_is_strict=False, max_is_strict=False, naming_scheme=hou.parmNamingScheme.Base1, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False)
hou_parm_template2.hide(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("up", "Orient Up Vector", 3, default_value=([0, 1, 0]), min=0, max=10, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Vector, naming_scheme=hou.parmNamingScheme.XYZW)
hou_parm_template2.hide(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("bank", "Auto-Bank factor", 1, default_value=([0]), min=-1, max=1, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template2.hide(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
hou_parm_template_group.append(hou_parm_template)
# Code for parameter template
hou_parm_template = hou.FolderParmTemplate("stdswitcher4_1", "Render", folder_type=hou.folderType.Tabs, default_value=0, ends_tab_group=False)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("shop_materialpath", "Material", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.NodeReference, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template2.setTags({"opfilter": "!!CUSTOM/MATERIAL!!", "oprelative": "."})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.MenuParmTemplate("shop_materialopts", "Options", menu_items=([]), menu_labels=([]), default_value=0, icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Mini, menu_use_token=False, is_button_strip=False, strip_uses_icons=False)
hou_parm_template2.hide(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("tdisplay", "Display", default_value=False)
hou_parm_template2.setJoinWithNext(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.IntParmTemplate("display", "Display", 1, default_value=([1]), min=0, max=1, min_is_strict=True, max_is_strict=True, naming_scheme=hou.parmNamingScheme.Base1, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.MenuParmTemplate("viewportlod", "Display As", menu_items=(["full","points","box","centroid","hidden","subd"]), menu_labels=(["Full Geometry","Point Cloud","Bounding Box","Centroid","Hidden","Subdivision Surface / Curves"]), default_value=0, icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False, is_button_strip=False, strip_uses_icons=False)
hou_parm_template2.setHelp("Choose how the object's geometry should be rendered in the viewport")
hou_parm_template2.setTags({"spare_category": "Render"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("vm_rendervisibility", "Render Visibility", 1, default_value=(["*"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=(["*","primary","primary|shadow","-primary","-diffuse","-diffuse&-reflect&-refract",""]), menu_labels=(["Visible to all","Visible only to primary rays","Visible only to primary and shadow rays","Invisible to primary rays (Phantom)","Invisible to diffuse rays","Invisible to secondary rays","Invisible (Unrenderable)"]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.StringReplace)
hou_parm_template2.setTags({"mantra_class": "object", "mantra_name": "rendervisibility", "spare_category": "Render"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("vm_rendersubd", "Render Polygons As Subdivision (Mantra)", default_value=False)
hou_parm_template2.setTags({"mantra_class": "object", "mantra_name": "rendersubd", "spare_category": "Geometry"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("vm_subdstyle", "Subdivision Style", 1, default_value=(["mantra_catclark"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=(["mantra_catclark","osd_catclark"]), menu_labels=(["Mantra Catmull-Clark","OpenSubdiv Catmull-Clark"]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ vm_rendersubd == 0 }")
hou_parm_template2.setTags({"mantra_class": "object", "mantra_name": "subdstyle", "spare_category": "Geometry"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("vm_subdgroup", "Subdivision Group", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ vm_rendersubd == 0 }")
hou_parm_template2.setTags({"mantra_class": "object", "mantra_name": "subdgroup", "spare_category": "Geometry"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("vm_osd_quality", "Open Subdiv Quality", 1, default_value=([1]), min=0, max=10, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ vm_rendersubd == 0 vm_subdstyle != osd_catclark }")
hou_parm_template2.setTags({"mantra_class": "object", "mantra_name": "osd_quality", "spare_category": "Geometry"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.IntParmTemplate("vm_osd_vtxinterp", "OSD Vtx Interp", 1, default_value=([2]), min=0, max=10, min_is_strict=False, max_is_strict=False, naming_scheme=hou.parmNamingScheme.Base1, menu_items=(["0","1","2"]), menu_labels=(["No vertex interpolation","Edges only","Edges and Corners"]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False)
hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ vm_rendersubd == 0 vm_subdstyle != osd_catclark }")
hou_parm_template2.setTags({"mantra_class": "object", "mantra_name": "osd_vtxinterp", "spare_category": "Geometry"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.IntParmTemplate("vm_osd_fvarinterp", "OSD FVar Interp", 1, default_value=([4]), min=0, max=10, min_is_strict=False, max_is_strict=False, naming_scheme=hou.parmNamingScheme.Base1, menu_items=(["0","1","2","3","4","5"]), menu_labels=(["Smooth everywhere","Sharpen corners only","Sharpen edges and corners","Sharpen edges and propagated corners","Sharpen all boundaries","Bilinear interpolation"]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False)
hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ vm_rendersubd == 0 vm_subdstyle != osd_catclark }")
hou_parm_template2.setTags({"mantra_class": "object", "mantra_name": "osd_fvarinterp", "spare_category": "Geometry"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FolderParmTemplate("folder0", "Shading", folder_type=hou.folderType.Tabs, default_value=0, ends_tab_group=False)
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("categories", "Categories", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.setHelp("A list of tags which can be used to select the object")
hou_parm_template3.setTags({"spare_category": "Shading"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("reflectmask", "Reflection Mask", 1, default_value=(["*"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.NodeReferenceList, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.setHelp("Objects that will be reflected on this object.")
hou_parm_template3.setTags({"opexpand": "1", "opfilter": "!!OBJ/GEOMETRY!!", "oprelative": "/obj", "spare_category": "Shading"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("refractmask", "Refraction Mask", 1, default_value=(["*"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.NodeReferenceList, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.setHelp("Objects that will be refracted on this object.")
hou_parm_template3.setTags({"opexpand": "1", "opfilter": "!!OBJ/GEOMETRY!!", "oprelative": "/obj", "spare_category": "Shading"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("lightmask", "Light Mask", 1, default_value=(["*"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.NodeReferenceList, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.setHelp("Lights that illuminate this object.")
hou_parm_template3.setTags({"opexpand": "1", "opfilter": "!!OBJ/LIGHT!!", "oprelative": "/obj", "spare_category": "Shading"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("lightcategories", "Light Selection", 1, default_value=(["*"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.setTags({"spare_category": "Shading"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("vm_lpetag", "LPE Tag", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "lpetag", "spare_category": "Shading"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("vm_volumefilter", "Volume Filter", 1, default_value=(["box"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=(["box","gaussian","bartlett","catrom","hanning","blackman","sinc"]), menu_labels=(["Box Filter","Gaussian","Bartlett (triangle)","Catmull-Rom","Hanning","Blackman","Sinc (sharpening)"]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "filter", "spare_category": "Shading"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.FloatParmTemplate("vm_volumefilterwidth", "Volume Filter Width", 1, default_value=([1]), min=0.001, max=5, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "filterwidth", "spare_category": "Shading"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("vm_matte", "Matte shading", default_value=False)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "matte", "spare_category": "Shading"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("vm_rayshade", "Raytrace Shading", default_value=False)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "rayshade", "spare_category": "Shading"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FolderParmTemplate("folder0_1", "Sampling", folder_type=hou.folderType.Tabs, default_value=0, ends_tab_group=False)
# Code for parameter template
hou_parm_template3 = hou.MenuParmTemplate("geo_velocityblur", "Geometry Velocity Blur", menu_items=(["off","on","accelblur"]), menu_labels=(["No Velocity Blur","Velocity Blur","Acceleration Blur"]), default_value=0, icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False, is_button_strip=False, strip_uses_icons=False)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ allowmotionblur == 0 }")
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("geo_accelattribute", "Acceleration Attribute", 1, default_value=(["accel"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ geo_velocityblur != accelblur }")
hou_parm_template3.setTags({"spare_category": "Sampling"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FolderParmTemplate("folder0_2", "Dicing", folder_type=hou.folderType.Tabs, default_value=0, ends_tab_group=False)
# Code for parameter template
hou_parm_template3 = hou.FloatParmTemplate("vm_shadingquality", "Shading Quality", 1, default_value=([1]), min=0, max=10, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "shadingquality", "spare_category": "Dicing"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.FloatParmTemplate("vm_flatness", "Dicing Flatness", 1, default_value=([0.05]), min=0, max=1, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "flatness", "spare_category": "Dicing"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.IntParmTemplate("vm_raypredice", "Ray Predicing", 1, default_value=([0]), min=0, max=10, min_is_strict=False, max_is_strict=False, naming_scheme=hou.parmNamingScheme.Base1, menu_items=(["0","1","2"]), menu_labels=(["Disable Predicing","Full Predicing","Precompute Bounds"]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "raypredice", "spare_category": "Dicing"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("vm_curvesurface", "Shade Curves As Surfaces", default_value=False)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "curvesurface", "spare_category": "Dicing"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FolderParmTemplate("folder0_3", "Geometry", folder_type=hou.folderType.Tabs, default_value=0, ends_tab_group=False)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("vm_rmbackface", "Backface Removal", default_value=False)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "rmbackface", "spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("shop_geometrypath", "Procedural Shader", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.NodeReference, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.setTags({"opfilter": "!!SHOP/GEOMETRY!!", "oprelative": ".", "spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("vm_forcegeometry", "Force Procedural Geometry Output", default_value=True)
hou_parm_template3.setTags({"spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("vm_rendersubdcurves", "Render Polygon Curves As Subdivision (Mantra)", default_value=False)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "rendersubdcurves", "spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.IntParmTemplate("vm_renderpoints", "Render As Points (Mantra)", 1, default_value=([2]), min=0, max=10, min_is_strict=False, max_is_strict=False, naming_scheme=hou.parmNamingScheme.Base1, menu_items=(["0","1","2"]), menu_labels=(["No Point Rendering","Render Only Points","Render Unconnected Points"]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "renderpoints", "spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.IntParmTemplate("vm_renderpointsas", "Render Points As (Mantra)", 1, default_value=([0]), min=0, max=10, min_is_strict=False, max_is_strict=False, naming_scheme=hou.parmNamingScheme.Base1, menu_items=(["0","1"]), menu_labels=(["Spheres","Circles"]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vm_renderpoints == 0 }")
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "renderpointsas", "spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("vm_usenforpoints", "Use N For Point Rendering", default_value=False)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vm_renderpoints == 0 }")
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "usenforpoints", "spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.FloatParmTemplate("vm_pointscale", "Point Scale", 1, default_value=([1]), min=0, max=10, min_is_strict=True, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.Base1)
hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vm_renderpoints == 0 }")
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "pointscale", "spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("vm_pscalediameter", "Treat Point Scale as Diameter Instead of Radius", default_value=False)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "pscalediameter", "spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("vm_metavolume", "Metaballs as Volume", default_value=False)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "metavolume", "spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.IntParmTemplate("vm_coving", "Coving", 1, default_value=([1]), min=0, max=10, min_is_strict=False, max_is_strict=False, naming_scheme=hou.parmNamingScheme.Base1, menu_items=(["0","1","2"]), menu_labels=(["Disable Coving","Coving for displacement/sub-d","Coving for all primitives"]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "coving", "spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.StringParmTemplate("vm_materialoverride", "Material Override", 1, default_value=(["compact"]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, menu_items=(["none","full","compact"]), menu_labels=(["Disabled","Evaluate for Each Primitve/Point","Evaluate Once"]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal)
hou_parm_template3.setTags({"spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("vm_overridedetail", "Ignore Geometry Attribute Shaders", default_value=False)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "overridedetail", "spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
# Code for parameter template
hou_parm_template3 = hou.ToggleParmTemplate("vm_procuseroottransform", "Proc Use Root Transform", default_value=True)
hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "procuseroottransform", "spare_category": "Geometry"})
hou_parm_template2.addParmTemplate(hou_parm_template3)
hou_parm_template.addParmTemplate(hou_parm_template2)
hou_parm_template_group.append(hou_parm_template)
# Code for parameter template
hou_parm_template = hou.FolderParmTemplate("stdswitcher4_2", "Misc", folder_type=hou.folderType.Tabs, default_value=0, ends_tab_group=False)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("use_dcolor", "Set Wireframe Color", default_value=False)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.FloatParmTemplate("dcolor", "Wireframe Color", 3, default_value=([1, 1, 1]), min=0, max=1, min_is_strict=True, max_is_strict=True, look=hou.parmLook.ColorSquare, naming_scheme=hou.parmNamingScheme.RGBA)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("picking", "Viewport Selecting Enabled", default_value=True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.StringParmTemplate("pickscript", "Select Script", 1, default_value=([""]), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.FileReference, menu_items=([]), menu_labels=([]), icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.StringReplace)
hou_parm_template2.setTags({"filechooser_mode": "read"})
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("caching", "Cache Object Transform", default_value=True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("vport_shadeopen", "Shade Open Curves In Viewport", default_value=False)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.ToggleParmTemplate("vport_displayassubdiv", "Display as Subdivision in Viewport", default_value=False)
hou_parm_template2.hide(True)
hou_parm_template.addParmTemplate(hou_parm_template2)
# Code for parameter template
hou_parm_template2 = hou.MenuParmTemplate("vport_onionskin", "Onion Skinning", menu_items=(["off","xform","on"]), menu_labels=(["Off","Transform only","Full Deformation"]), default_value=0, icon_names=([]), item_generator_script="", item_generator_script_language=hou.scriptLanguage.Python, menu_type=hou.menuType.Normal, menu_use_token=False, is_button_strip=False, strip_uses_icons=False)
hou_parm_template.addParmTemplate(hou_parm_template2)
hou_parm_template_group.append(hou_parm_template)
hou_node.setParmTemplateGroup(hou_parm_template_group)
# Code for /obj/PUBLISH/stdswitcher1 parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm = hou_node.parm("stdswitcher1")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/PUBLISH/xOrd parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm = hou_node.parm("xOrd")
hou_parm.lock(False)
hou_parm.set("srt")
hou_parm.setAutoscope(False)


# Code for /obj/PUBLISH/rOrd parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm = hou_node.parm("rOrd")
hou_parm.lock(False)
hou_parm.set("xyz")
hou_parm.setAutoscope(False)


# Code for /obj/PUBLISH/t parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm_tuple = hou_node.parmTuple("t")
hou_parm_tuple.lock((False, False, False))
hou_parm_tuple.set((0, 0, 0))
hou_parm_tuple.setAutoscope((True, True, True))


# Code for /obj/PUBLISH/r parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm_tuple = hou_node.parmTuple("r")
hou_parm_tuple.lock((False, False, False))
hou_parm_tuple.set((0, 0, 0))
hou_parm_tuple.setAutoscope((True, True, True))


# Code for /obj/PUBLISH/s parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm_tuple = hou_node.parmTuple("s")
hou_parm_tuple.lock((False, False, False))
hou_parm_tuple.set((1, 1, 1))
hou_parm_tuple.setAutoscope((True, True, True))


# Code for /obj/PUBLISH/p parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm_tuple = hou_node.parmTuple("p")
hou_parm_tuple.lock((False, False, False))
hou_parm_tuple.set((0, 0, 0))
hou_parm_tuple.setAutoscope((False, False, False))


# Code for /obj/PUBLISH/pr parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm_tuple = hou_node.parmTuple("pr")
hou_parm_tuple.lock((False, False, False))
hou_parm_tuple.set((0, 0, 0))
hou_parm_tuple.setAutoscope((False, False, False))


# Code for /obj/PUBLISH/scale parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm = hou_node.parm("scale")
hou_parm.lock(False)
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/PUBLISH/pre_xform parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm = hou_node.parm("pre_xform")
hou_parm.lock(False)
hou_parm.set("clean")
hou_parm.setAutoscope(False)


# Code for /obj/PUBLISH/keeppos parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm = hou_node.parm("keeppos")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/PUBLISH/childcomp parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm = hou_node.parm("childcomp")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/PUBLISH/constraints_on parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm = hou_node.parm("constraints_on")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/PUBLISH/constraints_path parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm = hou_node.parm("constraints_path")
hou_parm.lock(False)
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/PUBLISH/lookatpath parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm = hou_node.parm("lookatpath")
hou_parm.lock(False)
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/PUBLISH/lookupobjpath parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm = hou_node.parm("lookupobjpath")
hou_parm.lock(False)
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/PUBLISH/lookup parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm = hou_node.parm("lookup")
hou_parm.lock(False)
hou_parm.set("on")
hou_parm.setAutoscope(False)


# Code for /obj/PUBLISH/pathobjpath parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm = hou_node.parm("pathobjpath")
hou_parm.lock(False)
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/PUBLISH/roll parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm = hou_node.parm("roll")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/PUBLISH/pos parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm = hou_node.parm("pos")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/PUBLISH/uparmtype parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm = hou_node.parm("uparmtype")
hou_parm.lock(False)
hou_parm.set("arc")
hou_parm.setAutoscope(False)


# Code for /obj/PUBLISH/pathorient parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm = hou_node.parm("pathorient")
hou_parm.lock(False)
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/PUBLISH/up parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm_tuple = hou_node.parmTuple("up")
hou_parm_tuple.lock((False, False, False))
hou_parm_tuple.set((0, 1, 0))
hou_parm_tuple.setAutoscope((False, False, False))


# Code for /obj/PUBLISH/bank parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm = hou_node.parm("bank")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/PUBLISH/shop_materialpath parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm = hou_node.parm("shop_materialpath")
hou_parm.lock(False)
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/PUBLISH/shop_materialopts parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm = hou_node.parm("shop_materialopts")
hou_parm.lock(False)
hou_parm.set("override")
hou_parm.setAutoscope(False)


# Code for /obj/PUBLISH/tdisplay parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm = hou_node.parm("tdisplay")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/PUBLISH/display parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm = hou_node.parm("display")
hou_parm.lock(False)
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/PUBLISH/use_dcolor parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm = hou_node.parm("use_dcolor")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/PUBLISH/dcolor parm tuple
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm_tuple = hou_node.parmTuple("dcolor")
hou_parm_tuple.lock((False, False, False))
hou_parm_tuple.set((1, 1, 1))
hou_parm_tuple.setAutoscope((False, False, False))


# Code for /obj/PUBLISH/picking parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm = hou_node.parm("picking")
hou_parm.lock(False)
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/PUBLISH/pickscript parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm = hou_node.parm("pickscript")
hou_parm.lock(False)
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/PUBLISH/caching parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm = hou_node.parm("caching")
hou_parm.lock(False)
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/PUBLISH/vport_shadeopen parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm = hou_node.parm("vport_shadeopen")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/PUBLISH/vport_displayassubdiv parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm = hou_node.parm("vport_displayassubdiv")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/PUBLISH/vport_onionskin parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm = hou_node.parm("vport_onionskin")
hou_parm.lock(False)
hou_parm.set("off")
hou_parm.setAutoscope(False)


# Code for /obj/PUBLISH/stdswitcher41 parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm = hou_node.parm("stdswitcher41")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/PUBLISH/viewportlod parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm = hou_node.parm("viewportlod")
hou_parm.lock(False)
hou_parm.set("full")
hou_parm.setAutoscope(False)


# Code for /obj/PUBLISH/vm_rendervisibility parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm = hou_node.parm("vm_rendervisibility")
hou_parm.lock(False)
hou_parm.set("*")
hou_parm.setAutoscope(False)


# Code for /obj/PUBLISH/vm_rendersubd parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm = hou_node.parm("vm_rendersubd")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/PUBLISH/vm_subdstyle parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm = hou_node.parm("vm_subdstyle")
hou_parm.lock(False)
hou_parm.set("mantra_catclark")
hou_parm.setAutoscope(False)


# Code for /obj/PUBLISH/vm_subdgroup parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm = hou_node.parm("vm_subdgroup")
hou_parm.lock(False)
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/PUBLISH/vm_osd_quality parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm = hou_node.parm("vm_osd_quality")
hou_parm.lock(False)
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/PUBLISH/vm_osd_vtxinterp parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm = hou_node.parm("vm_osd_vtxinterp")
hou_parm.lock(False)
hou_parm.set(2)
hou_parm.setAutoscope(False)


# Code for /obj/PUBLISH/vm_osd_fvarinterp parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm = hou_node.parm("vm_osd_fvarinterp")
hou_parm.lock(False)
hou_parm.set(4)
hou_parm.setAutoscope(False)


# Code for /obj/PUBLISH/folder01 parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm = hou_node.parm("folder01")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/PUBLISH/categories parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm = hou_node.parm("categories")
hou_parm.lock(False)
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/PUBLISH/reflectmask parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm = hou_node.parm("reflectmask")
hou_parm.lock(False)
hou_parm.set("*")
hou_parm.setAutoscope(False)


# Code for /obj/PUBLISH/refractmask parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm = hou_node.parm("refractmask")
hou_parm.lock(False)
hou_parm.set("*")
hou_parm.setAutoscope(False)


# Code for /obj/PUBLISH/lightmask parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm = hou_node.parm("lightmask")
hou_parm.lock(False)
hou_parm.set("*")
hou_parm.setAutoscope(False)


# Code for /obj/PUBLISH/lightcategories parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm = hou_node.parm("lightcategories")
hou_parm.lock(False)
hou_parm.set("*")
hou_parm.setAutoscope(False)


# Code for /obj/PUBLISH/vm_lpetag parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm = hou_node.parm("vm_lpetag")
hou_parm.lock(False)
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/PUBLISH/vm_volumefilter parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm = hou_node.parm("vm_volumefilter")
hou_parm.lock(False)
hou_parm.set("box")
hou_parm.setAutoscope(False)


# Code for /obj/PUBLISH/vm_volumefilterwidth parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm = hou_node.parm("vm_volumefilterwidth")
hou_parm.lock(False)
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/PUBLISH/vm_matte parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm = hou_node.parm("vm_matte")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/PUBLISH/vm_rayshade parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm = hou_node.parm("vm_rayshade")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/PUBLISH/geo_velocityblur parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm = hou_node.parm("geo_velocityblur")
hou_parm.lock(False)
hou_parm.set("off")
hou_parm.setAutoscope(False)


# Code for /obj/PUBLISH/geo_accelattribute parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm = hou_node.parm("geo_accelattribute")
hou_parm.lock(False)
hou_parm.set("accel")
hou_parm.setAutoscope(False)


# Code for /obj/PUBLISH/vm_shadingquality parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm = hou_node.parm("vm_shadingquality")
hou_parm.lock(False)
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/PUBLISH/vm_flatness parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm = hou_node.parm("vm_flatness")
hou_parm.lock(False)
hou_parm.set(0.050000000000000003)
hou_parm.setAutoscope(False)


# Code for /obj/PUBLISH/vm_raypredice parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm = hou_node.parm("vm_raypredice")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/PUBLISH/vm_curvesurface parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm = hou_node.parm("vm_curvesurface")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/PUBLISH/vm_rmbackface parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm = hou_node.parm("vm_rmbackface")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/PUBLISH/shop_geometrypath parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm = hou_node.parm("shop_geometrypath")
hou_parm.lock(False)
hou_parm.set("")
hou_parm.setAutoscope(False)


# Code for /obj/PUBLISH/vm_forcegeometry parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm = hou_node.parm("vm_forcegeometry")
hou_parm.lock(False)
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/PUBLISH/vm_rendersubdcurves parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm = hou_node.parm("vm_rendersubdcurves")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/PUBLISH/vm_renderpoints parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm = hou_node.parm("vm_renderpoints")
hou_parm.lock(False)
hou_parm.set(2)
hou_parm.setAutoscope(False)


# Code for /obj/PUBLISH/vm_renderpointsas parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm = hou_node.parm("vm_renderpointsas")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/PUBLISH/vm_usenforpoints parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm = hou_node.parm("vm_usenforpoints")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/PUBLISH/vm_pointscale parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm = hou_node.parm("vm_pointscale")
hou_parm.lock(False)
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/PUBLISH/vm_pscalediameter parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm = hou_node.parm("vm_pscalediameter")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/PUBLISH/vm_metavolume parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm = hou_node.parm("vm_metavolume")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/PUBLISH/vm_coving parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm = hou_node.parm("vm_coving")
hou_parm.lock(False)
hou_parm.set(1)
hou_parm.setAutoscope(False)


# Code for /obj/PUBLISH/vm_materialoverride parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm = hou_node.parm("vm_materialoverride")
hou_parm.lock(False)
hou_parm.set("compact")
hou_parm.setAutoscope(False)


# Code for /obj/PUBLISH/vm_overridedetail parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm = hou_node.parm("vm_overridedetail")
hou_parm.lock(False)
hou_parm.set(0)
hou_parm.setAutoscope(False)


# Code for /obj/PUBLISH/vm_procuseroottransform parm
if locals().get("hou_node") is None:
    hou_node = hou.node("/obj/PUBLISH")
hou_parm = hou_node.parm("vm_procuseroottransform")
hou_parm.lock(False)
hou_parm.set(1)
hou_parm.setAutoscope(False)

# Code for /obj/__stickynote4
hou_sticky = hou_parent.createStickyNote("__stickynote4")
hou_sticky.setText("PUBLISH")
hou_sticky.setTextSize(1)
hou_sticky.setTextColor(hou.Color((0.996, 0.933, 0)))
hou_sticky.setDrawBackground(False)
hou_sticky.setPosition(hou.Vector2(27.2021, 4.22688))
hou_sticky.setSize(hou.Vector2(4.93495, 2.35681))
hou_sticky.setMinimized(False)
hou_sticky.setSelected(False)
hou_sticky.setColor(hou.Color([1, 0.969, 0.522]))


# Code for /obj/__stickynote3
hou_sticky = hou_parent.createStickyNote("__stickynote3")
hou_sticky.setText("RENDERS")
hou_sticky.setTextSize(1)
hou_sticky.setTextColor(hou.Color((0.996, 0.933, 0)))
hou_sticky.setDrawBackground(False)
hou_sticky.setPosition(hou.Vector2(16.7826, 4.2756))
hou_sticky.setSize(hou.Vector2(4.93495, 2.35681))
hou_sticky.setMinimized(False)
hou_sticky.setSelected(False)
hou_sticky.setColor(hou.Color([1, 0.969, 0.522]))


# Code for /obj/__stickynote2
hou_sticky = hou_parent.createStickyNote("__stickynote2")
hou_sticky.setText("FX")
hou_sticky.setTextSize(1)
hou_sticky.setTextColor(hou.Color((0.996, 0.933, 0)))
hou_sticky.setDrawBackground(False)
hou_sticky.setPosition(hou.Vector2(8.01466, 4.2756))
hou_sticky.setSize(hou.Vector2(1.6226, 2.35681))
hou_sticky.setMinimized(False)
hou_sticky.setSelected(False)
hou_sticky.setColor(hou.Color([1, 0.969, 0.522]))


# Code for /obj/__stickynote1
hou_sticky = hou_parent.createStickyNote("__stickynote1")
hou_sticky.setText("ASSETS")
hou_sticky.setTextSize(1)
hou_sticky.setTextColor(hou.Color((0.996, 0.933, 0)))
hou_sticky.setDrawBackground(False)
hou_sticky.setPosition(hou.Vector2(-3.30394, 4.19441))
hou_sticky.setSize(hou.Vector2(3.61975, 2.35681))
hou_sticky.setMinimized(False)
hou_sticky.setSelected(False)
hou_sticky.setColor(hou.Color([1, 0.969, 0.522]))

hou_parent = hou.node("/obj/FX")

# Code for /obj/FX/__stickynote1
hou_sticky = hou_parent.createStickyNote("__stickynote11")
hou_sticky.setText("INPUTS")
hou_sticky.setTextSize(3)
hou_sticky.setTextColor(hou.Color((0.996, 0.933, 0)))
hou_sticky.setDrawBackground(False)
hou_sticky.setPosition(hou.Vector2(28.6914, 20.5472))
hou_sticky.setSize(hou.Vector2(10.742, 5.95394))
hou_sticky.setMinimized(False)
hou_sticky.setSelected(False)
hou_sticky.setColor(hou.Color([1, 0.969, 0.522]))


# Code for /obj/FX/__stickynote2
hou_sticky = hou_parent.createStickyNote("__stickynote22")
hou_sticky.setText("FX")
hou_sticky.setTextSize(3)
hou_sticky.setTextColor(hou.Color((0.996, 0.933, 0)))
hou_sticky.setDrawBackground(False)
hou_sticky.setPosition(hou.Vector2(32.0012, -11.54))
hou_sticky.setSize(hou.Vector2(5.96261, 5.95394))
hou_sticky.setMinimized(False)
hou_sticky.setSelected(False)
hou_sticky.setColor(hou.Color([1, 0.969, 0.522]))

# Code for /obj/FX/__stickynote3
hou_sticky = hou_parent.createStickyNote("__stickynote33")
hou_sticky.setText("OUTPUT")
hou_sticky.setTextSize(3)
hou_sticky.setTextColor(hou.Color((0.996, 0.933, 0)))
hou_sticky.setDrawBackground(False)
hou_sticky.setPosition(hou.Vector2(28.4783, -63.7178))
hou_sticky.setSize(hou.Vector2(13.2351, 5.95394))
hou_sticky.setMinimized(False)
hou_sticky.setSelected(False)
hou_sticky.setColor(hou.Color([1, 0.969, 0.522]))





hou_node.setExpressionLanguage(hou.exprLanguage.Hscript)

hou_node.setUserData("___Version___", "17.5.425")
if hasattr(hou_node, "syncNodeVersionIfNeeded"):
    hou_node.syncNodeVersionIfNeeded("17.5.425")
# Update the parent node.
hou_parent = hou_node


# Restore the parent and current nodes.
hou_parent = hou_parent.parent()
hou_node = hou_node.parent()


# Restore the parent and current nodes.
hou_parent = hou_parent.parent()
hou_node = hou_node.parent()
